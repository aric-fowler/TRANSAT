from z3 import *
# Z3-based propositional logic for a single TRAP unit "_00"
# Contains variables referring to hypothetical units placed 
# above (_A), below (_B), left (_W), and right (_Y) of unit
# _00.
#
# Updated:  Oct 2023

# Interconnect net logic values
C1L21_00 = Bool('C1L21_00')
C1L22_00 = Bool('C1L22_00')
C1L23_00 = Bool('C1L23_00')
C1L2Z_00 = Bool('C1L2Z_00')
C2L21_00 = Bool('C2L21_00')
C2L22_00 = Bool('C2L22_00')
C2L23_00 = Bool('C2L23_00')
C2L2Z_00 = Bool('C2L2Z_00')
C3L21_00 = Bool('C3L21_00')
C3L22_00 = Bool('C3L22_00')
C3L23_00 = Bool('C3L23_00')
C3L2Z_00 = Bool('C3L2Z_00')
L31_00 = Bool('L31_00')
L32_00 = Bool('L32_00')
L33_00 = Bool('L33_00')
L34_00 = Bool('L34_00')
L35_00 = Bool('L35_00')
L36_00 = Bool('L36_00')
L37_00 = Bool('L37_00')
L38_00 = Bool('L38_00')
L39_00 = Bool('L39_00')
L41_00 = Bool('L41_00')
L42_00 = Bool('L42_00')
L43_00 = Bool('L43_00')
L44_00 = Bool('L44_00')
L45_00 = Bool('L45_00')
L46_00 = Bool('L46_00')
L47_00 = Bool('L47_00')
L48_00 = Bool('L48_00')
L49_00 = Bool('L49_00')

# Interconnect switch logic values (typically key inputs)
L31_00C1L2Z_00 = Bool('L31_00C1L2Z_00')
L31_00C2L21_00 = Bool('L31_00C2L21_00')
L31_00C3L21_00 = Bool('L31_00C3L21_00')
L31_00L41_00 = Bool('L31_00L41_00')
L31_00L44_00 = Bool('L31_00L44_00')
L31_00L47_00 = Bool('L31_00L47_00')
L32_00C1L21_00 = Bool('L32_00C1L21_00')
L32_00C2L2Z_00 = Bool('L32_00C2L2Z_00')
L32_00C3L21_00 = Bool('L32_00C3L21_00')
L32_00L42_00 = Bool('L32_00L42_00')
L32_00L45_00 = Bool('L32_00L45_00')
L32_00L48_00 = Bool('L32_00L48_00')
L33_00C1L21_00 = Bool('L33_00C1L21_00')
L33_00C2L21_00 = Bool('L33_00C2L21_00')
L33_00C3L2Z_00 = Bool('L33_00C3L2Z_00')
L33_00L43_00 = Bool('L33_00L43_00')
L33_00L46_00 = Bool('L33_00L46_00')
L33_00L49_00 = Bool('L33_00L49_00')
L34_00C1L22_00 = Bool('L34_00C1L22_00')
L34_00C2L22_00 = Bool('L34_00C2L22_00')
L34_00C3L2Z_00 = Bool('L34_00C3L2Z_00')
L34_00L41_00 = Bool('L34_00L41_00')
L34_00L44_00 = Bool('L34_00L44_00')
L34_00L47_00 = Bool('L34_00L47_00')
L35_00C1L2Z_00 = Bool('L35_00C1L2Z_00')
L35_00C2L22_00 = Bool('L35_00C2L22_00')
L35_00C3L22_00 = Bool('L35_00C3L22_00')
L35_00L42_00 = Bool('L35_00L42_00')
L35_00L45_00 = Bool('L35_00L45_00')
L35_00L48_00 = Bool('L35_00L48_00')
L36_00C1L22_00 = Bool('L36_00C1L22_00')
L36_00C2L2Z_00 = Bool('L36_00C2L2Z_00')
L36_00C3L22_00 = Bool('L36_00C3L22_00')
L36_00L43_00 = Bool('L36_00L43_00')
L36_00L46_00 = Bool('L36_00L46_00')
L36_00L49_00 = Bool('L36_00L49_00')
L37_00C1L23_00 = Bool('L37_00C1L23_00')
L37_00C2L2Z_00 = Bool('L37_00C2L2Z_00')
L37_00C3L23_00 = Bool('L37_00C3L23_00')
L37_00L41_00 = Bool('L37_00L41_00')
L37_00L44_00 = Bool('L37_00L44_00')
L37_00L47_00 = Bool('L37_00L47_00')
L38_00C1L23_00 = Bool('L38_00C1L23_00')
L38_00C2L23_00 = Bool('L38_00C2L23_00')
L38_00C3L2Z_00 = Bool('L38_00C3L2Z_00')
L38_00L42_00 = Bool('L38_00L42_00')
L38_00L45_00 = Bool('L38_00L45_00')
L38_00L48_00 = Bool('L38_00L48_00')
L39_00C1L2Z_00 = Bool('L39_00C1L2Z_00')
L39_00C2L23_00 = Bool('L39_00C2L23_00')
L39_00C3L23_00 = Bool('L39_00C3L23_00')
L39_00L43_00 = Bool('L39_00L43_00')
L39_00L46_00 = Bool('L39_00L46_00')
L39_00L49_00 = Bool('L39_00L49_00')
L41_00C1L21_00 = Bool('L41_00C1L21_00')
L41_00C1L2Z_00 = Bool('L41_00C1L2Z_00')
L42_00C1L22_00 = Bool('L42_00C1L22_00')
L42_00C1L2Z_00 = Bool('L42_00C1L2Z_00')
L43_00C1L23_00 = Bool('L43_00C1L23_00')
L43_00C1L2Z_00 = Bool('L43_00C1L2Z_00')
L44_00C2L23_00 = Bool('L44_00C2L23_00')
L44_00C2L2Z_00 = Bool('L44_00C2L2Z_00')
L45_00C2L21_00 = Bool('L45_00C2L21_00')
L45_00C2L2Z_00 = Bool('L45_00C2L2Z_00')
L46_00C2L22_00 = Bool('L46_00C2L22_00')
L46_00C2L2Z_00 = Bool('L46_00C2L2Z_00')
L47_00C3L22_00 = Bool('L47_00C3L22_00')
L47_00C3L2Z_00 = Bool('L47_00C3L2Z_00')
L48_00C3L23_00 = Bool('L48_00C3L23_00')
L48_00C3L2Z_00 = Bool('L48_00C3L2Z_00')
L49_00C3L21_00 = Bool('L49_00C3L21_00')
L49_00C3L2Z_00 = Bool('L49_00C3L2Z_00')

# Interconnect switches between a unit _00 and a unit left of (_W), right of (_Y), 
# above (_A), or below (_B) unit _00
# NOTE: these are not switches in the actual hardware. These will be hardwired
# on or off depending on how units are placed alongside each other.
L31_WL31_00 = Bool('L31_WL31_00')
L32_WL32_00 = Bool('L32_WL32_00')
L33_WL33_00 = Bool('L33_WL33_00')
L34_WL34_00 = Bool('L34_WL34_00')
L35_WL35_00 = Bool('L35_WL35_00')
L36_WL36_00 = Bool('L36_WL36_00')
L37_WL37_00 = Bool('L37_WL37_00')
L38_WL38_00 = Bool('L38_WL38_00')
L39_WL39_00 = Bool('L39_WL39_00')
L31_00L31_Y = Bool('L31_00L31_Y')
L32_00L32_Y = Bool('L32_00L32_Y')
L33_00L33_Y = Bool('L33_00L33_Y')
L34_00L34_Y = Bool('L34_00L34_Y')
L35_00L35_Y = Bool('L35_00L35_Y')
L36_00L36_Y = Bool('L36_00L36_Y')
L37_00L37_Y = Bool('L37_00L37_Y')
L38_00L38_Y = Bool('L38_00L38_Y')
L39_00L39_Y = Bool('L39_00L39_Y')
L41_AL41_00 = Bool('L41_AL41_00')
L42_AL42_00 = Bool('L42_AL42_00')
L43_AL43_00 = Bool('L43_AL43_00')
L44_AL44_00 = Bool('L44_AL44_00')
L45_AL45_00 = Bool('L45_AL45_00')
L46_AL46_00 = Bool('L46_AL46_00')
L47_AL47_00 = Bool('L47_AL47_00')
L48_AL48_00 = Bool('L48_AL48_00')
L49_AL49_00 = Bool('L49_AL49_00')
L41_00L41_B = Bool('L41_00L41_B')
L42_00L42_B = Bool('L42_00L42_B')
L43_00L43_B = Bool('L43_00L43_B')
L44_00L44_B = Bool('L44_00L44_B')
L45_00L45_B = Bool('L45_00L45_B')
L46_00L46_B = Bool('L46_00L46_B')
L47_00L47_B = Bool('L47_00L47_B')
L48_00L48_B = Bool('L48_00L48_B')
L49_00L49_B = Bool('L49_00L49_B')

# Interface net logic values
C1L11_00 = Bool('C1L11_00')
C1L12_00 = Bool('C1L12_00')
C1L13_00 = Bool('C1L13_00')
C2L11_00 = Bool('C2L11_00')
C2L12_00 = Bool('C2L12_00')
C2L13_00 = Bool('C2L13_00')
C3L11_00 = Bool('C3L11_00')
C3L12_00 = Bool('C3L12_00')
C3L13_00 = Bool('C3L13_00')

# Interface programming logic values
M1C1P1_00 = Bool('M1C1P1_00')
M1C1P2_00 = Bool('M1C1P2_00')
M1C1P3_00 = Bool('M1C1P3_00')
M1C2P1_00 = Bool('M1C2P1_00')
M1C2P2_00 = Bool('M1C2P2_00')
M1C2P3_00 = Bool('M1C2P3_00')
M1C3P1_00 = Bool('M1C3P1_00')
M1C3P2_00 = Bool('M1C3P2_00')
M1C3P3_00 = Bool('M1C3P3_00')
M2C1P1_00 = Bool('M2C1P1_00')
M2C1P2_00 = Bool('M2C1P2_00')
M2C1P3_00 = Bool('M2C1P3_00')
M2C2P1_00 = Bool('M2C2P1_00')
M2C2P2_00 = Bool('M2C2P2_00')
M2C2P3_00 = Bool('M2C2P3_00')
M2C3P1_00 = Bool('M2C3P1_00')
M2C3P2_00 = Bool('M2C3P2_00')
M2C3P3_00 = Bool('M2C3P3_00')
M3C1P1_00 = Bool('M3C1P1_00')
M3C1P2_00 = Bool('M3C1P2_00')
M3C1P3_00 = Bool('M3C1P3_00')
M3C2P1_00 = Bool('M3C2P1_00')
M3C2P2_00 = Bool('M3C2P2_00')
M3C2P3_00 = Bool('M3C2P3_00')
M3C3P1_00 = Bool('M3C3P1_00')
M3C3P2_00 = Bool('M3C3P2_00')
M3C3P3_00 = Bool('M3C3P3_00')
M4C1N1_00 = Bool('M4C1N1_00')
M4C1N2_00 = Bool('M4C1N2_00')
M4C1N3_00 = Bool('M4C1N3_00')
M4C2N1_00 = Bool('M4C2N1_00')
M4C2N2_00 = Bool('M4C2N2_00')
M4C2N3_00 = Bool('M4C2N3_00')
M4C3N1_00 = Bool('M4C3N1_00')
M4C3N2_00 = Bool('M4C3N2_00')
M4C3N3_00 = Bool('M4C3N3_00')
M5C1N1_00 = Bool('M5C1N1_00')
M5C1N2_00 = Bool('M5C1N2_00')
M5C1N3_00 = Bool('M5C1N3_00')
M5C2N1_00 = Bool('M5C2N1_00')
M5C2N2_00 = Bool('M5C2N2_00')
M5C2N3_00 = Bool('M5C2N3_00')
M5C3N1_00 = Bool('M5C3N1_00')
M5C3N2_00 = Bool('M5C3N2_00')
M5C3N3_00 = Bool('M5C3N3_00')
M6C1N1_00 = Bool('M6C1N1_00')
M6C1N2_00 = Bool('M6C1N2_00')
M6C1N3_00 = Bool('M6C1N3_00')
M6C2N1_00 = Bool('M6C2N1_00')
M6C2N2_00 = Bool('M6C2N2_00')
M6C2N3_00 = Bool('M6C2N3_00')
M6C3N1_00 = Bool('M6C3N1_00')
M6C3N2_00 = Bool('M6C3N2_00')
M6C3N3_00 = Bool('M6C3N3_00')
M7C1N1_00 = Bool('M7C1N1_00')
M7C1N2_00 = Bool('M7C1N2_00')
M7C1N3_00 = Bool('M7C1N3_00')
M7C2N1_00 = Bool('M7C2N1_00')
M7C2N2_00 = Bool('M7C2N2_00')
M7C2N3_00 = Bool('M7C2N3_00')
M7C3N1_00 = Bool('M7C3N1_00')
M7C3N2_00 = Bool('M7C3N2_00')
M7C3N3_00 = Bool('M7C3N3_00')

# Transistor array gate input logic values
C1N1_00 = Bool('C1N1_00')
C1N2_00 = Bool('C1N2_00')
C1N3_00 = Bool('C1N3_00')
C1NH_00 = Bool('C1NH_00')
C1NV_00 = Bool('C1NV_00')
C1P1_00 = Bool('C1P1_00')
C1P2_00 = Bool('C1P2_00')
C1P3_00 = Bool('C1P3_00')
C2N1_00 = Bool('C2N1_00')
C2N2_00 = Bool('C2N2_00')
C2N3_00 = Bool('C2N3_00')
C2NH_00 = Bool('C2NH_00')
C2NV_00 = Bool('C2NV_00')
C2P1_00 = Bool('C2P1_00')
C2P2_00 = Bool('C2P2_00')
C2P3_00 = Bool('C2P3_00')
C3N1_00 = Bool('C3N1_00')
C3N2_00 = Bool('C3N2_00')
C3N3_00 = Bool('C3N3_00')
C3NH_00 = Bool('C3NH_00')
C3NV_00 = Bool('C3NV_00')
C3P1_00 = Bool('C3P1_00')
C3P2_00 = Bool('C3P2_00')
C3P3_00 = Bool('C3P3_00')

# Transistor array net logic values
C1N_00 = Bool('C1N_00')
C1O_00 = Bool('C1O_00')
C1P_00 = Bool('C1P_00')
C2N_00 = Bool('C2N_00')
C2O_00 = Bool('C2O_00')
C2P_00 = Bool('C2P_00')
C3N_00 = Bool('C3N_00')
C3O_00 = Bool('C3O_00')
C3P_00 = Bool('C3P_00')

# Transistor array net and gate logic values for a unit to the left (W) or right (Y)
# NOTE: These are placeholders, and the suffix is meant to be replaced.
C1N_Y = Bool('C1N_Y')
C1O_Y = Bool('C1O_Y')
C1P_Y = Bool('C1P_Y')
C3N2_W = Bool('C3N2_W')
C3NH_W = Bool('C3NH_W')
C3P2_W = Bool('C3P2_W')

# Interconnect validity values
VC1L21_00 = Bool('VC1L21_00')
VC1L22_00 = Bool('VC1L22_00')
VC1L23_00 = Bool('VC1L23_00')
VC1L2Z_00 = Bool('VC1L2Z_00')
VC2L21_00 = Bool('VC2L21_00')
VC2L22_00 = Bool('VC2L22_00')
VC2L23_00 = Bool('VC2L23_00')
VC2L2Z_00 = Bool('VC2L2Z_00')
VC3L21_00 = Bool('VC3L21_00')
VC3L22_00 = Bool('VC3L22_00')
VC3L23_00 = Bool('VC3L23_00')
VC3L2Z_00 = Bool('VC3L2Z_00')
VL31_00 = Bool('VL31_00')
VL32_00 = Bool('VL32_00')
VL33_00 = Bool('VL33_00')
VL34_00 = Bool('VL34_00')
VL35_00 = Bool('VL35_00')
VL36_00 = Bool('VL36_00')
VL37_00 = Bool('VL37_00')
VL38_00 = Bool('VL38_00')
VL39_00 = Bool('VL39_00')
VL41_00 = Bool('VL41_00')
VL42_00 = Bool('VL42_00')
VL43_00 = Bool('VL43_00')
VL44_00 = Bool('VL44_00')
VL45_00 = Bool('VL45_00')
VL46_00 = Bool('VL46_00')
VL47_00 = Bool('VL47_00')
VL48_00 = Bool('VL48_00')
VL49_00 = Bool('VL49_00')

VL31_W = Bool('VL31_W')
VL32_W = Bool('VL32_W')
VL33_W = Bool('VL33_W')
VL34_W = Bool('VL34_W')
VL35_W = Bool('VL35_W')
VL36_W = Bool('VL36_W')
VL37_W = Bool('VL37_W')
VL38_W = Bool('VL38_W')
VL39_W = Bool('VL39_W')
VL31_Y = Bool('VL31_Y')
VL32_Y = Bool('VL32_Y')
VL33_Y = Bool('VL33_Y')
VL34_Y = Bool('VL34_Y')
VL35_Y = Bool('VL35_Y')
VL36_Y = Bool('VL36_Y')
VL37_Y = Bool('VL37_Y')
VL38_Y = Bool('VL38_Y')
VL39_Y = Bool('VL39_Y')
VL41_A = Bool('VL41_A')
VL42_A = Bool('VL42_A')
VL43_A = Bool('VL43_A')
VL44_A = Bool('VL44_A')
VL45_A = Bool('VL45_A')
VL46_A = Bool('VL46_A')
VL47_A = Bool('VL47_A')
VL48_A = Bool('VL48_A')
VL49_A = Bool('VL49_A')
VL41_B = Bool('VL41_B')
VL42_B = Bool('VL42_B')
VL43_B = Bool('VL43_B')
VL44_B = Bool('VL44_B')
VL45_B = Bool('VL45_B')
VL46_B = Bool('VL46_B')
VL47_B = Bool('VL47_B')
VL48_B = Bool('VL48_B')
VL49_B = Bool('VL49_B')

# Transistor array validity values
VC1N_00 = Bool('VC1N_00')
VC1O_00 = Bool('VC1O_00')
VC1P_00 = Bool('VC1P_00')
VC2N_00 = Bool('VC2N_00')
VC2O_00 = Bool('VC2O_00')
VC2P_00 = Bool('VC2P_00')
VC3N_00 = Bool('VC3N_00')
VC3O_00 = Bool('VC3O_00')
VC3P_00 = Bool('VC3P_00')

VC3N_W = Bool('VC3N_W')
VC3O_W = Bool('VC3O_W')
VC3P_W = Bool('VC3P_W')
VC1N_Y = Bool('VC1N_Y')
VC1O_Y = Bool('VC1O_Y')
VC1P_Y = Bool('VC1P_Y')

# Interconnect direction values
# A True value indicates that a signal is flowing from (1) an L3
# to an L2 wire, (2) an L3 wire to an L4 wire, or (3) an L2 wire
# to an L4 wire. A False value indicates that a signal is flowing
# from (1) an L2 wire to an L3 wire, (2) an L4 wire to an L3 wire, 
# or (3) an L4 wire to an L2 wire.
DL31_00C1L2Z_00 = Bool('DL31_00C1L2Z_00')
DL31_00L41_00 = Bool('DL31_00L41_00')
DL31_00C2L21_00 = Bool('DL31_00C2L21_00')
DL31_00L44_00 = Bool('DL31_00L44_00')
DL31_00C3L21_00 = Bool('DL31_00C3L21_00')
DL31_00L47_00 = Bool('DL31_00L47_00')
DL32_00C1L21_00 = Bool('DL32_00C1L21_00')
DL32_00L42_00 = Bool('DL32_00L42_00')
DL32_00C2L2Z_00 = Bool('DL32_00C2L2Z_00')
DL32_00L45_00 = Bool('DL32_00L45_00')
DL32_00C3L21_00 = Bool('DL32_00C3L21_00')
DL32_00L48_00 = Bool('DL32_00L48_00')
DL33_00C1L21_00 = Bool('DL33_00C1L21_00')
DL33_00L43_00 = Bool('DL33_00L43_00')
DL33_00C2L21_00 = Bool('DL33_00C2L21_00')
DL33_00L46_00 = Bool('DL33_00L46_00')
DL33_00C3L2Z_00 = Bool('DL33_00C3L2Z_00')
DL33_00L49_00 = Bool('DL33_00L49_00')
DL34_00C1L22_00 = Bool('DL34_00C1L22_00')
DL34_00L41_00 = Bool('DL34_00L41_00')
DL34_00C2L22_00 = Bool('DL34_00C2L22_00')
DL34_00L44_00 = Bool('DL34_00L44_00')
DL34_00C3L2Z_00 = Bool('DL34_00C3L2Z_00')
DL34_00L47_00 = Bool('DL34_00L47_00')
DL35_00C1L2Z_00 = Bool('DL35_00C1L2Z_00')
DL35_00L42_00 = Bool('DL35_00L42_00')
DL35_00C2L22_00 = Bool('DL35_00C2L22_00')
DL35_00L45_00 = Bool('DL35_00L45_00')
DL35_00C3L22_00 = Bool('DL35_00C3L22_00')
DL35_00L48_00 = Bool('DL35_00L48_00')
DL36_00C1L22_00 = Bool('DL36_00C1L22_00')
DL36_00L43_00 = Bool('DL36_00L43_00')
DL36_00C2L2Z_00 = Bool('DL36_00C2L2Z_00')
DL36_00L46_00 = Bool('DL36_00L46_00')
DL36_00C3L22_00 = Bool('DL36_00C3L22_00')
DL36_00L49_00 = Bool('DL36_00L49_00')
DL37_00C1L23_00 = Bool('DL37_00C1L23_00')
DL37_00L41_00 = Bool('DL37_00L41_00')
DL37_00C2L2Z_00 = Bool('DL37_00C2L2Z_00')
DL37_00L44_00 = Bool('DL37_00L44_00')
DL37_00C3L23_00 = Bool('DL37_00C3L23_00')
DL37_00L47_00 = Bool('DL37_00L47_00')
DL38_00C1L23_00 = Bool('DL38_00C1L23_00')
DL38_00L42_00 = Bool('DL38_00L42_00')
DL38_00C2L23_00 = Bool('DL38_00C2L23_00')
DL38_00L45_00 = Bool('DL38_00L45_00')
DL38_00C3L2Z_00 = Bool('DL38_00C3L2Z_00')
DL38_00L48_00 = Bool('DL38_00L48_00')
DL39_00C1L2Z_00 = Bool('DL39_00C1L2Z_00')
DL39_00L43_00 = Bool('DL39_00L43_00')
DL39_00C2L23_00 = Bool('DL39_00C2L23_00')
DL39_00L46_00 = Bool('DL39_00L46_00')
DL39_00C3L23_00 = Bool('DL39_00C3L23_00')
DL39_00L49_00 = Bool('DL39_00L49_00')
DL41_00C1L21_00 = Bool('DL41_00C1L21_00')
DL41_00C1L2Z_00 = Bool('DL41_00C1L2Z_00')
DL42_00C1L22_00 = Bool('DL42_00C1L22_00')
DL42_00C1L2Z_00 = Bool('DL42_00C1L2Z_00')
DL43_00C1L23_00 = Bool('DL43_00C1L23_00')
DL43_00C1L2Z_00 = Bool('DL43_00C1L2Z_00')
DL44_00C2L23_00 = Bool('DL44_00C2L23_00')
DL44_00C2L2Z_00 = Bool('DL44_00C2L2Z_00')
DL45_00C2L21_00 = Bool('DL45_00C2L21_00')
DL45_00C2L2Z_00 = Bool('DL45_00C2L2Z_00')
DL46_00C2L22_00 = Bool('DL46_00C2L22_00')
DL46_00C2L2Z_00 = Bool('DL46_00C2L2Z_00')
DL47_00C3L22_00 = Bool('DL47_00C3L22_00')
DL47_00C3L2Z_00 = Bool('DL47_00C3L2Z_00')
DL48_00C3L23_00 = Bool('DL48_00C3L23_00')
DL48_00C3L2Z_00 = Bool('DL48_00C3L2Z_00')
DL49_00C3L21_00 = Bool('DL49_00C3L21_00')
DL49_00C3L2Z_00 = Bool('DL49_00C3L2Z_00')

# Interconnect direction values between a unit _00 and a unit left of (_W), 
# right of (_Y), above (_A), or below (_B) unit _00
DL31_WL31_00 = Bool('DL31_WL31_00')
DL32_WL32_00 = Bool('DL32_WL32_00')
DL33_WL33_00 = Bool('DL33_WL33_00')
DL34_WL34_00 = Bool('DL34_WL34_00')
DL35_WL35_00 = Bool('DL35_WL35_00')
DL36_WL36_00 = Bool('DL36_WL36_00')
DL37_WL37_00 = Bool('DL37_WL37_00')
DL38_WL38_00 = Bool('DL38_WL38_00')
DL39_WL39_00 = Bool('DL39_WL39_00')
DL31_00L31_Y = Bool('DL31_00L31_Y')
DL32_00L32_Y = Bool('DL32_00L32_Y')
DL33_00L33_Y = Bool('DL33_00L33_Y')
DL34_00L34_Y = Bool('DL34_00L34_Y')
DL35_00L35_Y = Bool('DL35_00L35_Y')
DL36_00L36_Y = Bool('DL36_00L36_Y')
DL37_00L37_Y = Bool('DL37_00L37_Y')
DL38_00L38_Y = Bool('DL38_00L38_Y')
DL39_00L39_Y = Bool('DL39_00L39_Y')
DL41_AL41_00 = Bool('DL41_AL41_00')
DL42_AL42_00 = Bool('DL42_AL42_00')
DL43_AL43_00 = Bool('DL43_AL43_00')
DL44_AL44_00 = Bool('DL44_AL44_00')
DL45_AL45_00 = Bool('DL45_AL45_00')
DL46_AL46_00 = Bool('DL46_AL46_00')
DL47_AL47_00 = Bool('DL47_AL47_00')
DL48_AL48_00 = Bool('DL48_AL48_00')
DL49_AL49_00 = Bool('DL49_AL49_00')
DL42_00L42_B = Bool('DL42_00L42_B')
DL41_00L41_B = Bool('DL41_00L41_B')
DL43_00L43_B = Bool('DL43_00L43_B')
DL44_00L44_B = Bool('DL44_00L44_B')
DL45_00L45_B = Bool('DL45_00L45_B')
DL46_00L46_B = Bool('DL46_00L46_B')
DL47_00L47_B = Bool('DL47_00L47_B')
DL48_00L48_B = Bool('DL48_00L48_B')
DL49_00L49_B = Bool('DL49_00L49_B')

# Transistor array direction values
# A True DCx value indicates logic flowing from left to right. 
DC1N2_00 = Bool('DC1N2_00')
DC1NH_00 = Bool('DC1NH_00')
DC1P2_00 = Bool('DC1P2_00')
DC2N2_00 = Bool('DC2N2_00')
DC2NH_00 = Bool('DC2NH_00')
DC2P2_00 = Bool('DC2P2_00')
DC3N2_00 = Bool('DC3N2_00')
DC3NH_00 = Bool('DC3NH_00')
DC3P2_00 = Bool('DC3P2_00')
DC3N2_W = Bool('DC3N2_W')
DC3NH_W = Bool('DC3NH_W')
DC3P2_W = Bool('DC3P2_W')

# Additional helper variables for determining validity
isInpL31_00 = Bool('isInpL31_00')
isInpL32_00 = Bool('isInpL32_00')
isInpL33_00 = Bool('isInpL33_00')
isInpL34_00 = Bool('isInpL34_00')
isInpL35_00 = Bool('isInpL35_00')
isInpL36_00 = Bool('isInpL36_00')
isInpL37_00 = Bool('isInpL37_00')
isInpL38_00 = Bool('isInpL38_00')
isInpL39_00 = Bool('isInpL39_00')
isInpL41_00 = Bool('isInpL41_00')
isInpL42_00 = Bool('isInpL42_00')
isInpL43_00 = Bool('isInpL43_00')
isInpL44_00 = Bool('isInpL44_00')
isInpL45_00 = Bool('isInpL45_00')
isInpL46_00 = Bool('isInpL46_00')
isInpL47_00 = Bool('isInpL47_00')
isInpL48_00 = Bool('isInpL48_00')
isInpL49_00 = Bool('isInpL49_00')

# Count variables prevent cyclical loops
maxCnt = Int('maxCnt')
minCnt = Int('minCnt')
cntC1L21_00 = Int('cntC1L21_00')
cntC1L22_00 = Int('cntC1L22_00')
cntC1L23_00 = Int('cntC1L23_00')
cntC1L2Z_00 = Int('cntC1L2Z_00')
cntC2L21_00 = Int('cntC2L21_00')
cntC2L22_00 = Int('cntC2L22_00')
cntC2L23_00 = Int('cntC2L23_00')
cntC2L2Z_00 = Int('cntC2L2Z_00')
cntC3L21_00 = Int('cntC3L21_00')
cntC3L22_00 = Int('cntC3L22_00')
cntC3L23_00 = Int('cntC3L23_00')
cntC3L2Z_00 = Int('cntC3L2Z_00')
cntL31_00 = Int('cntL31_00')
cntL32_00 = Int('cntL32_00')
cntL33_00 = Int('cntL33_00')
cntL34_00 = Int('cntL34_00')
cntL35_00 = Int('cntL35_00')
cntL36_00 = Int('cntL36_00')
cntL37_00 = Int('cntL37_00')
cntL38_00 = Int('cntL38_00')
cntL39_00 = Int('cntL39_00')
cntL41_00 = Int('cntL41_00')
cntL42_00 = Int('cntL42_00')
cntL43_00 = Int('cntL43_00')
cntL44_00 = Int('cntL44_00')
cntL45_00 = Int('cntL45_00')
cntL46_00 = Int('cntL46_00')
cntL47_00 = Int('cntL47_00')
cntL48_00 = Int('cntL48_00')
cntL49_00 = Int('cntL49_00')

cntC1P_00 = Int('cntC1P_00')
cntC1O_00 = Int('cntC1O_00')
cntC1N_00 = Int('cntC1N_00')
cntC2P_00 = Int('cntC2P_00')
cntC2O_00 = Int('cntC2O_00')
cntC2N_00 = Int('cntC2N_00')
cntC3P_00 = Int('cntC3P_00')
cntC3O_00 = Int('cntC3O_00')
cntC3N_00 = Int('cntC3N_00')
cntC1P_Y = Int('cntC1P_Y')
cntC1O_Y = Int('cntC1O_Y')
cntC1N_Y = Int('cntC1N_Y')


# Interconnect logic clauses
c0 = (Implies(L31_00L41_00, (L31_00 == L41_00)))
c1 = (Implies(L31_00C1L2Z_00, (L31_00 == C1L2Z_00)))
c2 = (Implies(L31_00C2L21_00, (L31_00 == C2L21_00)))
c3 = (Implies(L31_00L44_00, (L31_00 == L44_00)))
c4 = (Implies(L31_00C3L21_00, (L31_00 == C3L21_00)))
c5 = (Implies(L31_00L47_00, (L31_00 == L47_00)))
c6 = (Implies(L32_00C1L21_00, (L32_00 == C1L21_00)))
c7 = (Implies(L32_00L42_00, (L32_00 == L42_00)))
c8 = (Implies(L32_00C2L2Z_00, (L32_00 == C2L2Z_00)))
c9 = (Implies(L32_00L45_00, (L32_00 == L45_00)))
c10 = (Implies(L32_00C3L21_00, (L32_00 == C3L21_00)))
c11 = (Implies(L32_00L48_00, (L32_00 == L48_00)))
c12 = (Implies(L33_00C1L21_00, (L33_00 == C1L21_00)))
c13 = (Implies(L33_00L43_00, (L33_00 == L43_00)))
c14 = (Implies(L33_00C2L21_00, (L33_00 == C2L21_00)))
c15 = (Implies(L33_00L46_00, (L33_00 == L46_00)))
c16 = (Implies(L33_00C3L2Z_00, (L33_00 == C3L2Z_00)))
c17 = (Implies(L33_00L49_00, (L33_00 == L49_00)))
c18 = (Implies(L34_00C1L22_00, (L34_00 == C1L22_00)))
c19 = (Implies(L34_00L41_00, (L34_00 == L41_00)))
c20 = (Implies(L34_00C2L22_00, (L34_00 == C2L22_00)))
c21 = (Implies(L34_00L44_00, (L34_00 == L44_00)))
c22 = (Implies(L34_00C3L2Z_00, (L34_00 == C3L2Z_00)))
c23 = (Implies(L34_00L47_00, (L34_00 == L47_00)))
c24 = (Implies(L35_00C1L2Z_00, (L35_00 == C1L2Z_00)))
c25 = (Implies(L35_00L42_00, (L35_00 == L42_00)))
c26 = (Implies(L35_00C2L22_00, (L35_00 == C2L22_00)))
c27 = (Implies(L35_00L45_00, (L35_00 == L45_00)))
c28 = (Implies(L35_00C3L22_00, (L35_00 == C3L22_00)))
c29 = (Implies(L35_00L48_00, (L35_00 == L48_00)))
c30 = (Implies(L36_00C1L22_00, (L36_00 == C1L22_00)))
c31 = (Implies(L36_00L43_00, (L36_00 == L43_00)))
c32 = (Implies(L36_00C2L2Z_00, (L36_00 == C2L2Z_00)))
c33 = (Implies(L36_00L46_00, (L36_00 == L46_00)))
c34 = (Implies(L36_00C3L22_00, (L36_00 == C3L22_00)))
c35 = (Implies(L36_00L49_00, (L36_00 == L49_00)))
c36 = (Implies(L37_00C1L23_00, (L37_00 == C1L23_00)))
c37 = (Implies(L37_00L41_00, (L37_00 == L41_00)))
c38 = (Implies(L37_00C2L2Z_00, (L37_00 == C2L2Z_00)))
c39 = (Implies(L37_00L44_00, (L37_00 == L44_00)))
c40 = (Implies(L37_00C3L23_00, (L37_00 == C3L23_00)))
c41 = (Implies(L37_00L47_00, (L37_00 == L47_00)))
c42 = (Implies(L38_00C1L23_00, (L38_00 == C1L23_00)))
c43 = (Implies(L38_00L42_00, (L38_00 == L42_00)))
c44 = (Implies(L38_00C2L23_00, (L38_00 == C2L23_00)))
c45 = (Implies(L38_00L45_00, (L38_00 == L45_00)))
c46 = (Implies(L38_00C3L2Z_00, (L38_00 == C3L2Z_00)))
c47 = (Implies(L38_00L48_00, (L38_00 == L48_00)))
c48 = (Implies(L39_00C1L2Z_00, (L39_00 == C1L2Z_00)))
c49 = (Implies(L39_00L43_00, (L39_00 == L43_00)))
c50 = (Implies(L39_00C2L23_00, (L39_00 == C2L23_00)))
c51 = (Implies(L39_00L46_00, (L39_00 == L46_00)))
c52 = (Implies(L39_00C3L23_00, (L39_00 == C3L23_00)))
c53 = (Implies(L39_00L49_00, (L39_00 == L49_00)))
c54 = (Implies(L41_00C1L21_00, (L41_00 == C1L21_00)))
c55 = (Implies(L41_00C1L2Z_00, (L41_00 == C1L2Z_00)))
c56 = (Implies(L42_00C1L22_00, (L42_00 == C1L22_00)))
c57 = (Implies(L42_00C1L2Z_00, (L42_00 == C1L2Z_00)))
c58 = (Implies(L43_00C1L23_00, (L43_00 == C1L23_00)))
c59 = (Implies(L43_00C1L2Z_00, (L43_00 == C1L2Z_00)))
c60 = (Implies(L44_00C2L23_00, (L44_00 == C2L23_00)))
c61 = (Implies(L44_00C2L2Z_00, (L44_00 == C2L2Z_00)))
c62 = (Implies(L45_00C2L21_00, (L45_00 == C2L21_00)))
c63 = (Implies(L45_00C2L2Z_00, (L45_00 == C2L2Z_00)))
c64 = (Implies(L46_00C2L22_00, (L46_00 == C2L22_00)))
c65 = (Implies(L46_00C2L2Z_00, (L46_00 == C2L2Z_00)))
c66 = (Implies(L47_00C3L22_00, (L47_00 == C3L22_00)))
c67 = (Implies(L47_00C3L2Z_00, (L47_00 == C3L2Z_00)))
c68 = (Implies(L48_00C3L23_00, (L48_00 == C3L23_00)))
c69 = (Implies(L48_00C3L2Z_00, (L48_00 == C3L2Z_00)))
c70 = (Implies(L49_00C3L21_00, (L49_00 == C3L21_00)))
c71 = (Implies(L49_00C3L2Z_00, (L49_00 == C3L2Z_00)))

# Interface logic clauses
c72 = (Implies(M2C1P3_00, (C1P3_00 == C1L13_00)))
c73 = (Implies(M2C1P2_00, (C1P2_00 == C1L12_00)))
c74 = (Implies(M2C1P1_00, (C1P1_00 == C1L11_00)))
c75 = (Implies(M4C1N1_00, (C1L11_00 == C1N1_00)))
c76 = (Implies(M5C1N1_00, (C1L12_00 == C1N1_00)))
c77 = (Implies(M6C1N1_00, (C1L13_00 == C1N1_00)))
c78 = (Implies(M4C1N2_00, (C1L11_00 == C1N2_00)))
c79 = (Implies(M5C1N2_00, (C1L12_00 == C1N2_00)))
c80 = (Implies(M6C1N2_00, (C1L13_00 == C1N2_00)))
c81 = (Implies(M4C1N3_00, (C1L11_00 == C1N3_00)))
c82 = (Implies(M5C1N3_00, (C1L12_00 == C1N3_00)))
c83 = (Implies(M6C1N3_00, (C1L13_00 == C1N3_00)))
c84 = (Implies(M2C2P3_00, (C2P3_00 == C2L13_00)))
c85 = (Implies(M2C2P2_00, (C2P2_00 == C2L12_00)))
c86 = (Implies(M2C2P1_00, (C2P1_00 == C2L11_00)))
c87 = (Implies(M4C2N1_00, (C2L11_00 == C2N1_00)))
c88 = (Implies(M5C2N1_00, (C2L12_00 == C2N1_00)))
c89 = (Implies(M6C2N1_00, (C2L13_00 == C2N1_00)))
c90 = (Implies(M4C2N2_00, (C2L11_00 == C2N2_00)))
c91 = (Implies(M5C2N2_00, (C2L12_00 == C2N2_00)))
c92 = (Implies(M6C2N2_00, (C2L13_00 == C2N2_00)))
c93 = (Implies(M4C2N3_00, (C2L11_00 == C2N3_00)))
c94 = (Implies(M5C2N3_00, (C2L12_00 == C2N3_00)))
c95 = (Implies(M6C2N3_00, (C2L13_00 == C2N3_00)))
c96 = (Implies(M2C3P1_00, (C3P1_00 == C3L11_00)))
c97 = (Implies(M2C3P2_00, (C3P2_00 == C3L12_00)))
c98 = (Implies(M2C3P3_00, (C3P3_00 == C3L13_00)))
c99 = (Implies(M4C3N1_00, (C3L11_00 == C3N1_00)))
c100 = (Implies(M5C3N1_00, (C3L12_00 == C3N1_00)))
c101 = (Implies(M6C3N1_00, (C3L13_00 == C3N1_00)))
c102 = (Implies(M4C3N2_00, (C3L11_00 == C3N2_00)))
c103 = (Implies(M5C3N2_00, (C3L12_00 == C3N2_00)))
c104 = (Implies(M6C3N2_00, (C3L13_00 == C3N2_00)))
c105 = (Implies(M4C3N3_00, (C3L11_00 == C3N3_00)))
c106 = (Implies(M5C3N3_00, (C3L12_00 == C3N3_00)))
c107 = (Implies(M6C3N3_00, (C3L13_00 == C3N3_00)))
c108 = (Implies(M1C1P3_00, (C1L13_00 == Not(C1L23_00))))
c109 = (Implies(Not(M1C1P3_00), (C1L13_00 == C1L23_00)))
c110 = (Implies(Not(M2C1P3_00), (C1P3_00 == Not(M3C1P3_00))))
c111 = (Implies(M1C1P2_00, (C1L12_00 == Not(C1L22_00))))
c112 = (Implies(Not(M1C1P2_00), (C1L12_00 == C1L22_00)))
c113 = (Implies(Not(M2C1P2_00), (C1P2_00 == Not(M3C1P2_00))))
c114 = (Implies(M1C1P1_00, (C1L11_00 == Not(C1L21_00))))
c115 = (Implies(Not(M1C1P1_00), (C1L11_00 == C1L21_00)))
c116 = (Implies(Not(M2C1P1_00), (C1P1_00 == Not(M3C1P1_00))))
c117 = (Implies(M1C2P3_00, (C2L13_00 == Not(C2L23_00))))
c118 = (Implies(Not(M1C2P3_00), (C2L13_00 == C2L23_00)))
c119 = (Implies(Not(M2C2P3_00), (C2P3_00 == Not(M3C2P3_00))))
c120 = (Implies(M1C2P2_00, (C2L12_00 == Not(C2L22_00))))
c121 = (Implies(Not(M1C2P2_00), (C2L12_00 == C2L22_00)))
c122 = (Implies(Not(M2C2P2_00), (C2P2_00 == Not(M3C2P2_00))))
c123 = (Implies(M1C2P1_00, (C2L11_00 == Not(C2L21_00))))
c124 = (Implies(Not(M1C2P1_00), (C2L11_00 == C2L21_00)))
c125 = (Implies(Not(M2C2P1_00), (C2P1_00 == Not(M3C2P1_00))))
c126 = (Implies(M1C3P1_00, (C3L11_00 == Not(C3L21_00))))
c127 = (Implies(Not(M1C3P1_00), (C3L11_00 == C3L21_00)))
c128 = (Implies(Not(M2C3P1_00), (C3P1_00 == Not(M3C3P1_00))))
c129 = (Implies(M1C3P2_00, (C3L12_00 == Not(C3L22_00))))
c130 = (Implies(Not(M1C3P2_00), (C3L12_00 == C3L22_00)))
c131 = (Implies(Not(M2C3P2_00), (C3P2_00 == Not(M3C3P2_00))))
c132 = (Implies(M1C3P3_00, (C3L13_00 == Not(C3L23_00))))
c133 = (Implies(Not(M1C3P3_00), (C3L13_00 == C3L23_00)))
c134 = (Implies(Not(M2C3P3_00), (C3P3_00 == Not(M3C3P3_00))))
c135 = (Implies(M4C1N1_00, Not(Or(M5C1N1_00, M6C1N1_00))))
c136 = (Implies(M5C1N1_00, Not(Or(M4C1N1_00, M6C1N1_00))))
c137 = (Implies(M6C1N1_00, Not(Or(M5C1N1_00, M4C1N1_00))))
c138 = (Implies(M4C1N2_00, Not(Or(M5C1N2_00, M6C1N2_00))))
c139 = (Implies(M5C1N2_00, Not(Or(M4C1N2_00, M6C1N2_00))))
c140 = (Implies(M6C1N2_00, Not(Or(M5C1N2_00, M4C1N2_00))))
c141 = (Implies(M4C1N3_00, Not(Or(M5C1N3_00, M6C1N3_00))))
c142 = (Implies(M5C1N3_00, Not(Or(M4C1N3_00, M6C1N3_00))))
c143 = (Implies(M6C1N3_00, Not(Or(M5C1N3_00, M4C1N3_00))))
c144 = (Implies(M4C2N1_00, Not(Or(M5C2N1_00, M6C2N1_00))))
c145 = (Implies(M5C2N1_00, Not(Or(M4C2N1_00, M6C2N1_00))))
c146 = (Implies(M6C2N1_00, Not(Or(M5C2N1_00, M4C2N1_00))))
c147 = (Implies(M4C2N2_00, Not(Or(M5C2N2_00, M6C2N2_00))))
c148 = (Implies(M5C2N2_00, Not(Or(M4C2N2_00, M6C2N2_00))))
c149 = (Implies(M6C2N2_00, Not(Or(M5C2N2_00, M4C2N2_00))))
c150 = (Implies(M4C2N3_00, Not(Or(M5C2N3_00, M6C2N3_00))))
c151 = (Implies(M5C2N3_00, Not(Or(M4C2N3_00, M6C2N3_00))))
c152 = (Implies(M6C2N3_00, Not(Or(M5C2N3_00, M4C2N3_00))))
c153 = (Implies(M4C3N1_00, Not(Or(M5C3N1_00, M6C3N1_00))))
c154 = (Implies(M5C3N1_00, Not(Or(M4C3N1_00, M6C3N1_00))))
c155 = (Implies(M6C3N1_00, Not(Or(M5C3N1_00, M4C3N1_00))))
c156 = (Implies(M4C3N3_00, Not(Or(M5C3N3_00, M6C3N3_00))))
c157 = (Implies(M5C3N3_00, Not(Or(M4C3N3_00, M6C3N3_00))))
c158 = (Implies(M6C3N3_00, Not(Or(M5C3N3_00, M4C3N3_00))))
c159 = (Implies(Not(Or(M4C1N1_00, M5C1N1_00, M6C1N1_00)), (M7C1N1_00 == C1N1_00)))
c160 = (Implies(Not(Or(M4C1N2_00, M5C1N2_00, M6C1N2_00)), (M7C1N2_00 == C1N2_00)))
c161 = (Implies(Not(Or(M4C1N3_00, M5C1N3_00, M6C1N3_00)), (M7C1N3_00 == C1N3_00)))
c162 = (Implies(Not(Or(M4C2N1_00, M5C2N1_00, M6C2N1_00)), (M7C2N1_00 == C2N1_00)))
c163 = (Implies(Not(Or(M4C2N2_00, M5C2N2_00, M6C2N2_00)), (M7C2N2_00 == C2N2_00)))
c164 = (Implies(Not(Or(M4C2N3_00, M5C2N3_00, M6C2N3_00)), (M7C2N3_00 == C2N3_00)))
c165 = (Implies(Not(Or(M4C3N1_00, M5C3N1_00, M6C3N1_00)), (M7C3N1_00 == C3N1_00)))
c166 = (Implies(Not(Or(M4C3N2_00, M5C3N2_00, M6C3N2_00)), (M7C3N2_00 == C3N2_00)))
c167 = (Implies(Not(Or(M4C3N3_00, M5C3N3_00, M6C3N3_00)), (M7C3N3_00 == C3N3_00)))

# Interconnect validity clauses
c168 = (VC1L21_00 == Or(And(L32_00C1L21_00, DL32_00C1L21_00, VL32_00),  And(L33_00C1L21_00, DL33_00C1L21_00, VL33_00),  And(L41_00C1L21_00, Not(DL41_00C1L21_00), VL41_00)))
c169 = (VC1L22_00 == Or(And(L34_00C1L22_00, DL34_00C1L22_00, VL34_00),  And(L36_00C1L22_00, DL36_00C1L22_00, VL36_00),  And(L42_00C1L22_00, Not(DL42_00C1L22_00), VL42_00)))
c170 = (VC1L23_00 == Or(And(L37_00C1L23_00, DL37_00C1L23_00, VL37_00),  And(L38_00C1L23_00, DL38_00C1L23_00, VL38_00),  And(L43_00C1L23_00, Not(DL43_00C1L23_00), VL43_00)))
c171 = (VC1L2Z_00 == Or(And(VC1O_00, C1NV_00), And(L31_00C1L2Z_00, DL31_00C1L2Z_00, VL31_00),  And(L35_00C1L2Z_00, DL35_00C1L2Z_00, VL35_00),  And(L39_00C1L2Z_00, DL39_00C1L2Z_00, VL39_00),  And(L41_00C1L2Z_00, Not(DL41_00C1L2Z_00), VL41_00),  And(L42_00C1L2Z_00, Not(DL42_00C1L2Z_00), VL42_00),  And(L43_00C1L2Z_00, Not(DL43_00C1L2Z_00), VL43_00)))
c172 = (VC2L21_00 == Or(And(L31_00C2L21_00, DL31_00C2L21_00, VL31_00),  And(L33_00C2L21_00, DL33_00C2L21_00, VL33_00),  And(L45_00C2L21_00, Not(DL45_00C2L21_00), VL45_00)))
c173 = (VC2L22_00 == Or(And(L34_00C2L22_00, DL34_00C2L22_00, VL34_00),  And(L35_00C2L22_00, DL35_00C2L22_00, VL35_00),  And(L46_00C2L22_00, Not(DL46_00C2L22_00), VL46_00)))
c174 = (VC2L23_00 == Or(And(L38_00C2L23_00, DL38_00C2L23_00, VL38_00),  And(L39_00C2L23_00, DL39_00C2L23_00, VL39_00),  And(L44_00C2L23_00, Not(DL44_00C2L23_00), VL44_00)))
c175 = (VC2L2Z_00 == Or(And(VC2O_00, C2NV_00), And(L32_00C2L2Z_00, DL32_00C2L2Z_00, VL32_00),  And(L36_00C2L2Z_00, DL36_00C2L2Z_00, VL36_00),  And(L37_00C2L2Z_00, DL37_00C2L2Z_00, VL37_00),  And(L44_00C2L2Z_00, Not(DL44_00C2L2Z_00), VL44_00),  And(L45_00C2L2Z_00, Not(DL45_00C2L2Z_00), VL45_00),  And(L46_00C2L2Z_00, Not(DL46_00C2L2Z_00), VL46_00)))
c176 = (VC3L21_00 == Or(And(L31_00C3L21_00, DL31_00C3L21_00, VL31_00),  And(L32_00C3L21_00, DL32_00C3L21_00, VL32_00),  And(L49_00C3L21_00, Not(DL49_00C3L21_00), VL49_00)))
c177 = (VC3L22_00 == Or(And(L35_00C3L22_00, DL35_00C3L22_00, VL35_00),  And(L36_00C3L22_00, DL36_00C3L22_00, VL36_00),  And(L47_00C3L22_00, Not(DL47_00C3L22_00), VL47_00)))
c178 = (VC3L23_00 == Or(And(L37_00C3L23_00, DL37_00C3L23_00, VL37_00),  And(L39_00C3L23_00, DL39_00C3L23_00, VL39_00),  And(L48_00C3L23_00, Not(DL48_00C3L23_00), VL48_00)))
c179 = (VC3L2Z_00 == Or(And(VC3O_00, C3NV_00), And(L33_00C3L2Z_00, DL33_00C3L2Z_00, VL33_00),  And(L34_00C3L2Z_00, DL34_00C3L2Z_00, VL34_00),  And(L38_00C3L2Z_00, DL38_00C3L2Z_00, VL38_00),  And(L47_00C3L2Z_00, Not(DL47_00C3L2Z_00), VL47_00),  And(L48_00C3L2Z_00, Not(DL48_00C3L2Z_00), VL48_00),  And(L49_00C3L2Z_00, Not(DL49_00C3L2Z_00), VL49_00)))
c180 = (VL31_00 == Or(isInpL31_00, And(L31_WL31_00, DL31_WL31_00, VL31_W), And(L31_00L31_Y, Not(DL31_00L31_Y), VL31_Y), And(L31_00L41_00, Not(DL31_00L41_00), VL41_00),  And(L31_00C1L2Z_00, Not(DL31_00C1L2Z_00), VC1L2Z_00),  And(L31_00C2L21_00, Not(DL31_00C2L21_00), VC2L21_00),  And(L31_00L44_00, Not(DL31_00L44_00), VL44_00),  And(L31_00C3L21_00, Not(DL31_00C3L21_00), VC3L21_00),  And(L31_00L47_00, Not(DL31_00L47_00), VL47_00)))
c181 = (VL32_00 == Or(isInpL32_00, And(L32_WL32_00, DL32_WL32_00, VL32_W), And(L32_00L32_Y, Not(DL32_00L32_Y), VL32_Y), And(L32_00C1L21_00, Not(DL32_00C1L21_00), VC1L21_00),  And(L32_00L42_00, Not(DL32_00L42_00), VL42_00),  And(L32_00C2L2Z_00, Not(DL32_00C2L2Z_00), VC2L2Z_00),  And(L32_00L45_00, Not(DL32_00L45_00), VL45_00),  And(L32_00C3L21_00, Not(DL32_00C3L21_00), VC3L21_00),  And(L32_00L48_00, Not(DL32_00L48_00), VL48_00)))
c182 = (VL33_00 == Or(isInpL33_00, And(L33_WL33_00, DL33_WL33_00, VL33_W), And(L33_00L33_Y, Not(DL33_00L33_Y), VL33_Y), And(L33_00C1L21_00, Not(DL33_00C1L21_00), VC1L21_00),  And(L33_00L43_00, Not(DL33_00L43_00), VL43_00),  And(L33_00C2L21_00, Not(DL33_00C2L21_00), VC2L21_00),  And(L33_00L46_00, Not(DL33_00L46_00), VL46_00),  And(L33_00C3L2Z_00, Not(DL33_00C3L2Z_00), VC3L2Z_00),  And(L33_00L49_00, Not(DL33_00L49_00), VL49_00)))
c183 = (VL34_00 == Or(isInpL34_00, And(L34_WL34_00, DL34_WL34_00, VL34_W), And(L34_00L34_Y, Not(DL34_00L34_Y), VL34_Y), And(L34_00C1L22_00, Not(DL34_00C1L22_00), VC1L22_00),  And(L34_00L41_00, Not(DL34_00L41_00), VL41_00),  And(L34_00C2L22_00, Not(DL34_00C2L22_00), VC2L22_00),  And(L34_00L44_00, Not(DL34_00L44_00), VL44_00),  And(L34_00C3L2Z_00, Not(DL34_00C3L2Z_00), VC3L2Z_00),  And(L34_00L47_00, Not(DL34_00L47_00), VL47_00)))
c184 = (VL35_00 == Or(isInpL35_00, And(L35_WL35_00, DL35_WL35_00, VL35_W), And(L35_00L35_Y, Not(DL35_00L35_Y), VL35_Y), And(L35_00C1L2Z_00, Not(DL35_00C1L2Z_00), VC1L2Z_00),  And(L35_00L42_00, Not(DL35_00L42_00), VL42_00),  And(L35_00C2L22_00, Not(DL35_00C2L22_00), VC2L22_00),  And(L35_00L45_00, Not(DL35_00L45_00), VL45_00),  And(L35_00C3L22_00, Not(DL35_00C3L22_00), VC3L22_00),  And(L35_00L48_00, Not(DL35_00L48_00), VL48_00)))
c185 = (VL36_00 == Or(isInpL36_00, And(L36_WL36_00, DL36_WL36_00, VL36_W), And(L36_00L36_Y, Not(DL36_00L36_Y), VL36_Y), And(L36_00C1L22_00, Not(DL36_00C1L22_00), VC1L22_00),  And(L36_00L43_00, Not(DL36_00L43_00), VL43_00),  And(L36_00C2L2Z_00, Not(DL36_00C2L2Z_00), VC2L2Z_00),  And(L36_00L46_00, Not(DL36_00L46_00), VL46_00),  And(L36_00C3L22_00, Not(DL36_00C3L22_00), VC3L22_00),  And(L36_00L49_00, Not(DL36_00L49_00), VL49_00)))
c186 = (VL37_00 == Or(isInpL37_00, And(L37_WL37_00, DL37_WL37_00, VL37_W), And(L37_00L37_Y, Not(DL37_00L37_Y), VL37_Y), And(L37_00C1L23_00, Not(DL37_00C1L23_00), VC1L23_00),  And(L37_00L41_00, Not(DL37_00L41_00), VL41_00),  And(L37_00C2L2Z_00, Not(DL37_00C2L2Z_00), VC2L2Z_00),  And(L37_00L44_00, Not(DL37_00L44_00), VL44_00),  And(L37_00C3L23_00, Not(DL37_00C3L23_00), VC3L23_00),  And(L37_00L47_00, Not(DL37_00L47_00), VL47_00)))
c187 = (VL38_00 == Or(isInpL38_00, And(L38_WL38_00, DL38_WL38_00, VL38_W), And(L38_00L38_Y, Not(DL38_00L38_Y), VL38_Y), And(L38_00C1L23_00, Not(DL38_00C1L23_00), VC1L23_00),  And(L38_00L42_00, Not(DL38_00L42_00), VL42_00),  And(L38_00C2L23_00, Not(DL38_00C2L23_00), VC2L23_00),  And(L38_00L45_00, Not(DL38_00L45_00), VL45_00),  And(L38_00C3L2Z_00, Not(DL38_00C3L2Z_00), VC3L2Z_00),  And(L38_00L48_00, Not(DL38_00L48_00), VL48_00)))
c188 = (VL39_00 == Or(isInpL39_00, And(L39_WL39_00, DL39_WL39_00, VL39_W), And(L39_00L39_Y, Not(DL39_00L39_Y), VL39_Y), And(L39_00C1L2Z_00, Not(DL39_00C1L2Z_00), VC1L2Z_00),  And(L39_00L43_00, Not(DL39_00L43_00), VL43_00),  And(L39_00C2L23_00, Not(DL39_00C2L23_00), VC2L23_00),  And(L39_00L46_00, Not(DL39_00L46_00), VL46_00),  And(L39_00C3L23_00, Not(DL39_00C3L23_00), VC3L23_00),  And(L39_00L49_00, Not(DL39_00L49_00), VL49_00)))
c189 = (VL41_00 == Or(isInpL41_00, And(L41_AL41_00, Not(DL41_AL41_00), VL41_A), And(L41_00L41_B, DL41_00L41_B, VL41_B),  And(L31_00L41_00, DL31_00L41_00, VL31_00),  And(L34_00L41_00, DL34_00L41_00, VL34_00),  And(L37_00L41_00, DL37_00L41_00, VL37_00),  And(L41_00C1L21_00, DL41_00C1L21_00, VC1L21_00),  And(L41_00C1L2Z_00, DL41_00C1L2Z_00, VC1L2Z_00)))
c190 = (VL42_00 == Or(isInpL42_00, And(L42_AL42_00, Not(DL42_AL42_00), VL42_A), And(L42_00L42_B, DL42_00L42_B, VL42_B), And(L32_00L42_00, DL32_00L42_00, VL32_00),  And(L35_00L42_00, DL35_00L42_00, VL35_00),  And(L38_00L42_00, DL38_00L42_00, VL38_00),  And(L42_00C1L22_00, DL42_00C1L22_00, VC1L22_00),  And(L42_00C1L2Z_00, DL42_00C1L2Z_00, VC1L2Z_00)))
c191 = (VL43_00 == Or(isInpL43_00, And(L43_AL43_00, Not(DL43_AL43_00), VL43_A), And(L43_00L43_B, DL43_00L43_B, VL43_B), And(L33_00L43_00, DL33_00L43_00, VL33_00),  And(L36_00L43_00, DL36_00L43_00, VL36_00),  And(L39_00L43_00, DL39_00L43_00, VL39_00),  And(L43_00C1L23_00, DL43_00C1L23_00, VC1L23_00),  And(L43_00C1L2Z_00, DL43_00C1L2Z_00, VC1L2Z_00)))
c192 = (VL44_00 == Or(isInpL44_00, And(L44_AL44_00, Not(DL44_AL44_00), VL44_A), And(L44_00L44_B, DL44_00L44_B, VL44_B), And(L31_00L44_00, DL31_00L44_00, VL31_00),  And(L34_00L44_00, DL34_00L44_00, VL34_00),  And(L37_00L44_00, DL37_00L44_00, VL37_00),  And(L44_00C2L23_00, DL44_00C2L23_00, VC2L23_00),  And(L44_00C2L2Z_00, DL44_00C2L2Z_00, VC2L2Z_00)))
c193 = (VL45_00 == Or(isInpL45_00, And(L45_AL45_00, Not(DL45_AL45_00), VL45_A), And(L45_00L45_B, DL45_00L45_B, VL45_B), And(L32_00L45_00, DL32_00L45_00, VL32_00),  And(L35_00L45_00, DL35_00L45_00, VL35_00),  And(L38_00L45_00, DL38_00L45_00, VL38_00),  And(L45_00C2L21_00, DL45_00C2L21_00, VC2L21_00),  And(L45_00C2L2Z_00, DL45_00C2L2Z_00, VC2L2Z_00)))
c194 = (VL46_00 == Or(isInpL46_00, And(L46_AL46_00, Not(DL46_AL46_00), VL46_A), And(L46_00L46_B, DL46_00L46_B, VL46_B), And(L33_00L46_00, DL33_00L46_00, VL33_00),  And(L36_00L46_00, DL36_00L46_00, VL36_00),  And(L39_00L46_00, DL39_00L46_00, VL39_00),  And(L46_00C2L22_00, DL46_00C2L22_00, VC2L22_00),  And(L46_00C2L2Z_00, DL46_00C2L2Z_00, VC2L2Z_00)))
c195 = (VL47_00 == Or(isInpL47_00, And(L47_AL47_00, Not(DL47_AL47_00), VL47_A), And(L47_00L47_B, DL47_00L47_B, VL47_B), And(L31_00L47_00, DL31_00L47_00, VL31_00),  And(L34_00L47_00, DL34_00L47_00, VL34_00),  And(L37_00L47_00, DL37_00L47_00, VL37_00),  And(L47_00C3L22_00, DL47_00C3L22_00, VC3L22_00),  And(L47_00C3L2Z_00, DL47_00C3L2Z_00, VC3L2Z_00)))
c196 = (VL48_00 == Or(isInpL48_00, And(L48_AL48_00, Not(DL48_AL48_00), VL48_A), And(L48_00L48_B, DL48_00L48_B, VL48_B), And(L32_00L48_00, DL32_00L48_00, VL32_00),  And(L35_00L48_00, DL35_00L48_00, VL35_00),  And(L38_00L48_00, DL38_00L48_00, VL38_00),  And(L48_00C3L23_00, DL48_00C3L23_00, VC3L23_00),  And(L48_00C3L2Z_00, DL48_00C3L2Z_00, VC3L2Z_00)))
c197 = (VL49_00 == Or(isInpL49_00, And(L49_AL49_00, Not(DL49_AL49_00), VL49_A), And(L49_00L49_B, DL49_00L49_B, VL49_B), And(L33_00L49_00, DL33_00L49_00, VL33_00),  And(L36_00L49_00, DL36_00L49_00, VL36_00),  And(L39_00L49_00, DL39_00L49_00, VL39_00),  And(L49_00C3L21_00, DL49_00C3L21_00, VC3L21_00),  And(L49_00C3L2Z_00, DL49_00C3L2Z_00, VC3L2Z_00)))

# Validity clauses of neighboring interconnects above (A), below (B), and left (W), and right (Y) of this TRAP "00" unit - hardwired off for a single unit
c198 = (Not(VL41_A))
c199 = (Not(VL42_A))
c200 = (Not(VL43_A))
c201 = (Not(VL44_A))
c202 = (Not(VL45_A))
c203 = (Not(VL46_A))
c204 = (Not(VL47_A))
c205 = (Not(VL48_A))
c206 = (Not(VL49_A))
c207 = (Not(VL41_B))
c208 = (Not(VL42_B))
c209 = (Not(VL43_B))
c210 = (Not(VL44_B))
c211 = (Not(VL45_B))
c212 = (Not(VL46_B))
c213 = (Not(VL47_B))
c214 = (Not(VL48_B))
c215 = (Not(VL49_B))
c216 = (Not(VL31_W))
c217 = (Not(VL32_W))
c218 = (Not(VL33_W))
c219 = (Not(VL34_W))
c220 = (Not(VL35_W))
c221 = (Not(VL36_W))
c222 = (Not(VL37_W))
c223 = (Not(VL38_W))
c224 = (Not(VL39_W))
c225 = (Not(VL31_Y))
c226 = (Not(VL32_Y))
c227 = (Not(VL33_Y))
c228 = (Not(VL34_Y))
c229 = (Not(VL35_Y))
c230 = (Not(VL36_Y))
c231 = (Not(VL37_Y))
c232 = (Not(VL38_Y))
c233 = (Not(VL39_Y))

# Interface validity clauses
c234 = (Implies(Not(VC1L23_00), Not(M2C1P3_00)))
c235 = (Implies(Not(VC1L22_00), Not(M2C1P2_00)))
c236 = (Implies(Not(VC1L21_00), Not(M2C1P1_00)))
c237 = (Implies(Not(VC1L23_00), And(Not(M6C1N1_00), Not(M6C1N2_00), Not(M6C1N3_00))))
c238 = (Implies(Not(VC1L22_00), And(Not(M5C1N1_00), Not(M5C1N2_00), Not(M5C1N3_00))))
c239 = (Implies(Not(VC1L21_00), And(Not(M4C1N1_00), Not(M4C1N2_00), Not(M4C1N3_00))))
c240 = (Implies(Not(VC2L23_00), Not(M2C2P3_00)))
c241 = (Implies(Not(VC2L22_00), Not(M2C2P2_00)))
c242 = (Implies(Not(VC2L21_00), Not(M2C2P1_00)))
c243 = (Implies(Not(VC2L23_00), And(Not(M6C2N1_00), Not(M6C2N2_00), Not(M6C2N3_00))))
c244 = (Implies(Not(VC2L22_00), And(Not(M5C2N1_00), Not(M5C2N2_00), Not(M5C2N3_00))))
c245 = (Implies(Not(VC2L21_00), And(Not(M4C2N1_00), Not(M4C2N2_00), Not(M4C2N3_00))))
c246 = (Implies(Not(VC3L23_00), Not(M2C3P3_00)))
c247 = (Implies(Not(VC3L22_00), Not(M2C3P2_00)))
c248 = (Implies(Not(VC3L21_00), Not(M2C3P1_00)))
c249 = (Implies(Not(VC3L23_00), And(Not(M6C3N1_00), Not(M6C3N2_00), Not(M6C3N3_00))))
c250 = (Implies(Not(VC3L22_00), And(Not(M5C3N1_00), Not(M5C3N2_00), Not(M5C3N3_00))))
c251 = (Implies(Not(VC3L21_00), And(Not(M4C3N1_00), Not(M4C3N2_00), Not(M4C3N3_00))))

# Transistor array logic clauses
c252 = (Implies(Not(C1P3_00), C1P_00))
c253 = (Implies(Not(C1P2_00), (C1P_00 == C2P_00)))
c254 = (Implies(Not(C1P1_00), (C1P_00 == C1O_00)))
c255 = (Implies(C1NH_00, (C1O_00 == C2O_00)))
c256 = (Implies(C1NV_00, (C1O_00 == C1L2Z_00)))
c257 = (Implies(C1N1_00, (C1O_00 == C1N_00)))
c258 = (Implies(C1N2_00, (C1N_00 == C2N_00)))
c259 = (Implies(C1N3_00, Not(C1N_00)))

c260 = (Implies(Not(C2P3_00), C2P_00))
c261 = (Implies(Not(C2P2_00), (C2P_00 == C3P_00)))
c262 = (Implies(Not(C2P1_00), (C2P_00 == C2O_00)))
c263 = (Implies(C2NH_00, (C2O_00 == C3O_00)))
c264 = (Implies(C2NV_00, (C2O_00 == C2L2Z_00)))
c265 = (Implies(C2N1_00, (C2O_00 == C2N_00)))
c266 = (Implies(C2N2_00, (C2N_00 == C3N_00)))
c267 = (Implies(C2N3_00, Not(C2N_00)))

c268 = (Implies(Not(C3P3_00), C3P_00))
c269 = (Implies(Not(C3P2_00), (C3P_00 == C1P_Y)))
c270 = (Implies(Not(C3P1_00), (C3P_00 == C3O_00)))
c271 = (Implies(C3NH_00, (C3O_00 == C1O_Y)))
c272 = (Implies(C3NV_00, (C3O_00 == C3L2Z_00)))
c273 = (Implies(C3N1_00, (C3O_00 == C3N_00)))
c274 = (Implies(C3N2_00, (C3N_00 == C1N_Y)))
c275 = (Implies(C3N3_00, Not(C3N_00)))

# Transistor array direction clauses
c276 = (Implies(Not(C1P1_00), And(DC3P2_W, Not(DC1P2_00))))
c277 = (Implies(Not(C2P1_00), And(DC1P2_00, Not(DC2P2_00))))
c278 = (Implies(Not(C3P1_00), And(DC2P2_00, Not(DC3P2_00))))
c279 = (Implies(C1N1_00, And(DC3N2_W, Not(DC1N2_00))))
c280 = (Implies(C2N1_00, And(DC1N2_00, Not(DC2N2_00))))
c281 = (Implies(C3N1_00, And(DC2N2_00, Not(DC3N2_00))))

# Logic clauses of neighboring transistor arrays left (W) of this TRAP "00" unit - hardwired off for a single unit
c282 = (C3P2_W)
c283 = (Not(C3N2_W))
c284 = (Not(C3NH_W))

# Transistor array validity clauses
c285 = (VC1P_00 == Or(Not(C1P3_00), And(VC2P_00, Not(C1P2_00), Not(DC1P2_00)), And(VC3P_W, Not(C3P2_W), DC3P2_W)))
c286 = (VC2P_00 == Or(Not(C2P3_00), And(VC1P_00, Not(C1P2_00), DC1P2_00), And(VC3P_00, Not(C2P2_00), Not(DC2P2_00))))
c287 = (VC3P_00 == Or(Not(C3P3_00), And(VC2P_00, Not(C2P2_00), DC2P2_00), And(VC1P_Y, Not(C3P2_00), Not(DC3P2_00))))
c288 = (VC1O_00 == Or(And(VC1P_00, Not(C1P1_00)), And(VC1N_00, C1N1_00), And(VC2O_00, C1NH_00, Not(DC1NH_00)), And(VC3O_W, C3NH_W, DC3NH_W)))
c289 = (VC2O_00 == Or(And(VC1O_00, C1NH_00, DC1NH_00), And(VC2P_00, Not(C2P1_00)), And(VC2N_00, C2N1_00), And(VC3O_00, C2NH_00, Not(DC2NH_00))))
c290 = (VC3O_00 == Or(And(VC2O_00, C2NH_00, DC2NH_00), And(VC3P_00, Not(C3P1_00)), And(VC3N_00, C3N1_00), And(VC1O_Y, C3NH_00, Not(DC3NH_00))))
c291 = (VC1N_00 == Or((C1N3_00), And(VC2N_00, C1N2_00, Not(DC1N2_00)), And(VC3N_W, C3N2_W, DC3N2_W)))
c292 = (VC2N_00 == Or(And(VC1N_00, C1N2_00, DC1N2_00), (C2N3_00), And(VC3N_00, C2N2_00, Not(DC2N2_00))))
c293 = (VC3N_00 == Or(And(VC2N_00, C2N2_00, DC2N2_00), (C3N3_00), And(VC1N_Y, C3N2_00, Not(DC3N2_00))))

# Validity clauses of neighboring transistor arrays left (W) and right (Y) of this TRAP "00" unit - hardwired off for a single unit
c294 = (Not(VC3P_W))
c295 = (Not(VC3O_W))
c296 = (Not(VC3N_W))
c297 = (Not(VC1P_Y))
c298 = (Not(VC1N_Y))
c299 = (Not(VC1O_Y))

# Interconnect count clauses
c300 = (Implies(And(L32_00C1L21_00, DL32_00C1L21_00), cntC1L21_00 > cntL32_00))
c301 = (Implies(And(L32_00C1L21_00, Not(DL32_00C1L21_00)), cntL32_00 > cntC1L21_00))
c302 = (Implies(And(L33_00C1L21_00, DL33_00C1L21_00), cntC1L21_00 > cntL33_00))
c303 = (Implies(And(L33_00C1L21_00, Not(DL33_00C1L21_00)), cntL33_00 > cntC1L21_00))
c304 = (Implies(And(L34_00C1L22_00, DL34_00C1L22_00), cntC1L22_00 > cntL34_00))
c305 = (Implies(And(L34_00C1L22_00, Not(DL34_00C1L22_00)), cntL34_00 > cntC1L22_00))
c306 = (Implies(And(L36_00C1L22_00, DL36_00C1L22_00), cntC1L22_00 > cntL36_00))
c307 = (Implies(And(L36_00C1L22_00, Not(DL36_00C1L22_00)), cntL36_00 > cntC1L22_00))
c308 = (Implies(And(L37_00C1L23_00, DL37_00C1L23_00), cntC1L23_00 > cntL37_00))
c309 = (Implies(And(L37_00C1L23_00, Not(DL37_00C1L23_00)), cntL37_00 > cntC1L23_00))
c310 = (Implies(And(L38_00C1L23_00, DL38_00C1L23_00), cntC1L23_00 > cntL38_00))
c311 = (Implies(And(L38_00C1L23_00, Not(DL38_00C1L23_00)), cntL38_00 > cntC1L23_00))
c312 = (Implies(And(L31_00C2L21_00, DL31_00C2L21_00), cntC2L21_00 > cntL31_00))
c313 = (Implies(And(L31_00C2L21_00, Not(DL31_00C2L21_00)), cntL31_00 > cntC2L21_00))
c314 = (Implies(And(L33_00C2L21_00, DL33_00C2L21_00), cntC2L21_00 > cntL33_00))
c315 = (Implies(And(L33_00C2L21_00, Not(DL33_00C2L21_00)), cntL33_00 > cntC2L21_00))
c316 = (Implies(And(L34_00C2L22_00, DL34_00C2L22_00), cntC2L22_00 > cntL34_00))
c317 = (Implies(And(L34_00C2L22_00, Not(DL34_00C2L22_00)), cntL34_00 > cntC2L22_00))
c318 = (Implies(And(L35_00C2L22_00, DL35_00C2L22_00), cntC2L22_00 > cntL35_00))
c319 = (Implies(And(L35_00C2L22_00, Not(DL35_00C2L22_00)), cntL35_00 > cntC2L22_00))
c320 = (Implies(And(L38_00C2L23_00, DL38_00C2L23_00), cntC2L23_00 > cntL38_00))
c321 = (Implies(And(L38_00C2L23_00, Not(DL38_00C2L23_00)), cntL38_00 > cntC2L23_00))
c322 = (Implies(And(L39_00C2L23_00, DL39_00C2L23_00), cntC2L23_00 > cntL39_00))
c323 = (Implies(And(L39_00C2L23_00, Not(DL39_00C2L23_00)), cntL39_00 > cntC2L23_00))
c324 = (Implies(And(L31_00C3L21_00, DL31_00C3L21_00), cntC3L21_00 > cntL31_00))
c325 = (Implies(And(L31_00C3L21_00, Not(DL31_00C3L21_00)), cntL31_00 > cntC3L21_00))
c326 = (Implies(And(L32_00C3L21_00, DL32_00C3L21_00), cntC3L21_00 > cntL32_00))
c327 = (Implies(And(L32_00C3L21_00, Not(DL32_00C3L21_00)), cntL32_00 > cntC3L21_00))
c328 = (Implies(And(L35_00C3L22_00, DL35_00C3L22_00), cntC3L22_00 > cntL35_00))
c329 = (Implies(And(L35_00C3L22_00, Not(DL35_00C3L22_00)), cntL35_00 > cntC3L22_00))
c330 = (Implies(And(L36_00C3L22_00, DL36_00C3L22_00), cntC3L22_00 > cntL36_00))
c331 = (Implies(And(L36_00C3L22_00, Not(DL36_00C3L22_00)), cntL36_00 > cntC3L22_00))
c332 = (Implies(And(L37_00C3L23_00, DL37_00C3L23_00), cntC3L23_00 > cntL37_00))
c333 = (Implies(And(L37_00C3L23_00, Not(DL37_00C3L23_00)), cntL37_00 > cntC3L23_00))
c334 = (Implies(And(L39_00C3L23_00, DL39_00C3L23_00), cntC3L23_00 > cntL39_00))
c335 = (Implies(And(L39_00C3L23_00, Not(DL39_00C3L23_00)), cntL39_00 > cntC3L23_00))
c336 = (Implies(And(L31_00C1L2Z_00, DL31_00C1L2Z_00), cntC1L2Z_00 > cntL31_00))
c337 = (Implies(And(L31_00C1L2Z_00, Not(DL31_00C1L2Z_00)), cntL31_00 > cntC1L2Z_00))
c338 = (Implies(And(L35_00C1L2Z_00, DL35_00C1L2Z_00), cntC1L2Z_00 > cntL35_00))
c339 = (Implies(And(L35_00C1L2Z_00, Not(DL35_00C1L2Z_00)), cntL35_00 > cntC1L2Z_00))
c340 = (Implies(And(L39_00C1L2Z_00, DL39_00C1L2Z_00), cntC1L2Z_00 > cntL39_00))
c341 = (Implies(And(L39_00C1L2Z_00, Not(DL39_00C1L2Z_00)), cntL39_00 > cntC1L2Z_00))
c342 = (Implies(And(L32_00C2L2Z_00, DL32_00C2L2Z_00), cntC2L2Z_00 > cntL32_00))
c343 = (Implies(And(L32_00C2L2Z_00, Not(DL32_00C2L2Z_00)), cntL32_00 > cntC2L2Z_00))
c344 = (Implies(And(L36_00C2L2Z_00, DL36_00C2L2Z_00), cntC2L2Z_00 > cntL36_00))
c345 = (Implies(And(L36_00C2L2Z_00, Not(DL36_00C2L2Z_00)), cntL36_00 > cntC2L2Z_00))
c346 = (Implies(And(L37_00C2L2Z_00, DL37_00C2L2Z_00), cntC2L2Z_00 > cntL37_00))
c347 = (Implies(And(L37_00C2L2Z_00, Not(DL37_00C2L2Z_00)), cntL37_00 > cntC2L2Z_00))
c348 = (Implies(And(L33_00C3L2Z_00, DL33_00C3L2Z_00), cntC3L2Z_00 > cntL33_00))
c349 = (Implies(And(L33_00C3L2Z_00, Not(DL33_00C3L2Z_00)), cntL33_00 > cntC3L2Z_00))
c350 = (Implies(And(L34_00C3L2Z_00, DL34_00C3L2Z_00), cntC3L2Z_00 > cntL34_00))
c351 = (Implies(And(L34_00C3L2Z_00, Not(DL34_00C3L2Z_00)), cntL34_00 > cntC3L2Z_00))
c352 = (Implies(And(L38_00C3L2Z_00, DL38_00C3L2Z_00), cntC3L2Z_00 > cntL38_00))
c353 = (Implies(And(L38_00C3L2Z_00, Not(DL38_00C3L2Z_00)), cntL38_00 > cntC3L2Z_00))
c354 = (Implies(And(L31_00L41_00, Not(DL31_00L41_00)), cntL31_00 > cntL41_00))
c355 = (Implies(And(L31_00L41_00, DL31_00L41_00), cntL41_00 > cntL31_00))
c356 = (Implies(And(L31_00L44_00, Not(DL31_00L44_00)), cntL31_00 > cntL44_00))
c357 = (Implies(And(L31_00L44_00, DL31_00L44_00), cntL44_00 > cntL31_00))
c358 = (Implies(And(L31_00L47_00, Not(DL31_00L47_00)), cntL31_00 > cntL47_00))
c359 = (Implies(And(L31_00L47_00, DL31_00L47_00), cntL47_00 > cntL31_00))
c360 = (Implies(And(L32_00L42_00, Not(DL32_00L42_00)), cntL32_00 > cntL42_00))
c361 = (Implies(And(L32_00L42_00, DL32_00L42_00), cntL42_00 > cntL32_00))
c362 = (Implies(And(L32_00L45_00, Not(DL32_00L45_00)), cntL32_00 > cntL45_00))
c363 = (Implies(And(L32_00L45_00, DL32_00L45_00), cntL45_00 > cntL32_00))
c364 = (Implies(And(L32_00L48_00, Not(DL32_00L48_00)), cntL32_00 > cntL48_00))
c365 = (Implies(And(L32_00L48_00, DL32_00L48_00), cntL48_00 > cntL32_00))
c366 = (Implies(And(L33_00L43_00, Not(DL33_00L43_00)), cntL33_00 > cntL43_00))
c367 = (Implies(And(L33_00L43_00, DL33_00L43_00), cntL43_00 > cntL33_00))
c368 = (Implies(And(L33_00L46_00, Not(DL33_00L46_00)), cntL33_00 > cntL46_00))
c369 = (Implies(And(L33_00L46_00, DL33_00L46_00), cntL46_00 > cntL33_00))
c370 = (Implies(And(L33_00L49_00, Not(DL33_00L49_00)), cntL33_00 > cntL49_00))
c371 = (Implies(And(L33_00L49_00, DL33_00L49_00), cntL49_00 > cntL33_00))
c372 = (Implies(And(L34_00L41_00, Not(DL34_00L41_00)), cntL34_00 > cntL41_00))
c373 = (Implies(And(L34_00L41_00, DL34_00L41_00), cntL41_00 > cntL34_00))
c374 = (Implies(And(L34_00L44_00, Not(DL34_00L44_00)), cntL34_00 > cntL44_00))
c375 = (Implies(And(L34_00L44_00, DL34_00L44_00), cntL44_00 > cntL34_00))
c376 = (Implies(And(L34_00L47_00, Not(DL34_00L47_00)), cntL34_00 > cntL47_00))
c377 = (Implies(And(L34_00L47_00, DL34_00L47_00), cntL47_00 > cntL34_00))
c378 = (Implies(And(L35_00L42_00, Not(DL35_00L42_00)), cntL35_00 > cntL42_00))
c379 = (Implies(And(L35_00L42_00, DL35_00L42_00), cntL42_00 > cntL35_00))
c380 = (Implies(And(L35_00L45_00, Not(DL35_00L45_00)), cntL35_00 > cntL45_00))
c381 = (Implies(And(L35_00L45_00, DL35_00L45_00), cntL45_00 > cntL35_00))
c382 = (Implies(And(L35_00L48_00, Not(DL35_00L48_00)), cntL35_00 > cntL48_00))
c383 = (Implies(And(L35_00L48_00, DL35_00L48_00), cntL48_00 > cntL35_00))
c384 = (Implies(And(L36_00L43_00, Not(DL36_00L43_00)), cntL36_00 > cntL43_00))
c385 = (Implies(And(L36_00L43_00, DL36_00L43_00), cntL43_00 > cntL36_00))
c386 = (Implies(And(L36_00L46_00, Not(DL36_00L46_00)), cntL36_00 > cntL46_00))
c387 = (Implies(And(L36_00L46_00, DL36_00L46_00), cntL46_00 > cntL36_00))
c388 = (Implies(And(L36_00L49_00, Not(DL36_00L49_00)), cntL36_00 > cntL49_00))
c389 = (Implies(And(L36_00L49_00, DL36_00L49_00), cntL49_00 > cntL36_00))
c390 = (Implies(And(L37_00L41_00, Not(DL37_00L41_00)), cntL37_00 > cntL41_00))
c391 = (Implies(And(L37_00L41_00, DL37_00L41_00), cntL41_00 > cntL37_00))
c392 = (Implies(And(L37_00L44_00, Not(DL37_00L44_00)), cntL37_00 > cntL44_00))
c393 = (Implies(And(L37_00L44_00, DL37_00L44_00), cntL44_00 > cntL37_00))
c394 = (Implies(And(L37_00L47_00, Not(DL37_00L47_00)), cntL37_00 > cntL47_00))
c395 = (Implies(And(L37_00L47_00, DL37_00L47_00), cntL47_00 > cntL37_00))
c396 = (Implies(And(L38_00L42_00, Not(DL38_00L42_00)), cntL38_00 > cntL42_00))
c397 = (Implies(And(L38_00L42_00, DL38_00L42_00), cntL42_00 > cntL38_00))
c398 = (Implies(And(L38_00L45_00, Not(DL38_00L45_00)), cntL38_00 > cntL45_00))
c399 = (Implies(And(L38_00L45_00, DL38_00L45_00), cntL45_00 > cntL38_00))
c400 = (Implies(And(L38_00L48_00, Not(DL38_00L48_00)), cntL38_00 > cntL48_00))
c401 = (Implies(And(L38_00L48_00, DL38_00L48_00), cntL48_00 > cntL38_00))
c402 = (Implies(And(L39_00L43_00, Not(DL39_00L43_00)), cntL39_00 > cntL43_00))
c403 = (Implies(And(L39_00L43_00, DL39_00L43_00), cntL43_00 > cntL39_00))
c404 = (Implies(And(L39_00L46_00, Not(DL39_00L46_00)), cntL39_00 > cntL46_00))
c405 = (Implies(And(L39_00L46_00, DL39_00L46_00), cntL46_00 > cntL39_00))
c406 = (Implies(And(L39_00L49_00, Not(DL39_00L49_00)), cntL39_00 > cntL49_00))
c407 = (Implies(And(L39_00L49_00, DL39_00L49_00), cntL49_00 > cntL39_00))
c408 = (Implies(And(L41_00C1L21_00, DL41_00C1L21_00), cntL41_00 > cntC1L21_00))
c409 = (Implies(And(L41_00C1L21_00, Not(DL41_00C1L21_00)), cntC1L21_00 > cntL41_00))
c410 = (Implies(And(L41_00C1L2Z_00, DL41_00C1L2Z_00), cntL41_00 > cntC1L2Z_00))
c411 = (Implies(And(L41_00C1L2Z_00, Not(DL41_00C1L2Z_00)), cntC1L2Z_00 > cntL41_00))
c412 = (Implies(And(L42_00C1L22_00, DL42_00C1L22_00), cntL42_00 > cntC1L22_00))
c413 = (Implies(And(L42_00C1L22_00, Not(DL42_00C1L22_00)), cntC1L22_00 > cntL42_00))
c414 = (Implies(And(L42_00C1L2Z_00, DL42_00C1L2Z_00), cntL42_00 > cntC1L2Z_00))
c415 = (Implies(And(L42_00C1L2Z_00, Not(DL42_00C1L2Z_00)), cntC1L2Z_00 > cntL42_00))
c416 = (Implies(And(L43_00C1L23_00, DL43_00C1L23_00), cntL43_00 > cntC1L23_00))
c417 = (Implies(And(L43_00C1L23_00, Not(DL43_00C1L23_00)), cntC1L23_00 > cntL43_00))
c418 = (Implies(And(L43_00C1L2Z_00, DL43_00C1L2Z_00), cntL43_00 > cntC1L2Z_00))
c419 = (Implies(And(L43_00C1L2Z_00, Not(DL43_00C1L2Z_00)), cntC1L2Z_00 > cntL43_00))
c420 = (Implies(And(L44_00C2L23_00, DL44_00C2L23_00), cntL44_00 > cntC2L23_00))
c421 = (Implies(And(L44_00C2L23_00, Not(DL44_00C2L23_00)), cntC2L23_00 > cntL44_00))
c422 = (Implies(And(L44_00C2L2Z_00, DL44_00C2L2Z_00), cntL44_00 > cntC2L2Z_00))
c423 = (Implies(And(L44_00C2L2Z_00, Not(DL44_00C2L2Z_00)), cntC2L2Z_00 > cntL44_00))
c424 = (Implies(And(L45_00C2L21_00, DL45_00C2L21_00), cntL45_00 > cntC2L21_00))
c425 = (Implies(And(L45_00C2L21_00, Not(DL45_00C2L21_00)), cntC2L21_00 > cntL45_00))
c426 = (Implies(And(L45_00C2L2Z_00, DL45_00C2L2Z_00), cntL45_00 > cntC2L2Z_00))
c427 = (Implies(And(L45_00C2L2Z_00, Not(DL45_00C2L2Z_00)), cntC2L2Z_00 > cntL45_00))
c428 = (Implies(And(L46_00C2L22_00, DL46_00C2L22_00), cntL46_00 > cntC2L22_00))
c429 = (Implies(And(L46_00C2L22_00, Not(DL46_00C2L22_00)), cntC2L22_00 > cntL46_00))
c430 = (Implies(And(L46_00C2L2Z_00, DL46_00C2L2Z_00), cntL46_00 > cntC2L2Z_00))
c431 = (Implies(And(L46_00C2L2Z_00, Not(DL46_00C2L2Z_00)), cntC2L2Z_00 > cntL46_00))
c432 = (Implies(And(L47_00C3L22_00, DL47_00C3L22_00), cntL47_00 > cntC3L22_00))
c433 = (Implies(And(L47_00C3L22_00, Not(DL47_00C3L22_00)), cntC3L22_00 > cntL47_00))
c434 = (Implies(And(L47_00C3L2Z_00, DL47_00C3L2Z_00), cntL47_00 > cntC3L2Z_00))
c435 = (Implies(And(L47_00C3L2Z_00, Not(DL47_00C3L2Z_00)), cntC3L2Z_00 > cntL47_00))
c436 = (Implies(And(L48_00C3L23_00, DL48_00C3L23_00), cntL48_00 > cntC3L23_00))
c437 = (Implies(And(L48_00C3L23_00, Not(DL48_00C3L23_00)), cntC3L23_00 > cntL48_00))
c438 = (Implies(And(L48_00C3L2Z_00, DL48_00C3L2Z_00), cntL48_00 > cntC3L2Z_00))
c439 = (Implies(And(L48_00C3L2Z_00, Not(DL48_00C3L2Z_00)), cntC3L2Z_00 > cntL48_00))
c440 = (Implies(And(L49_00C3L21_00, DL49_00C3L21_00), cntL49_00 > cntC3L21_00))
c441 = (Implies(And(L49_00C3L21_00, Not(DL49_00C3L21_00)), cntC3L21_00 > cntL49_00))
c442 = (Implies(And(L49_00C3L2Z_00, DL49_00C3L2Z_00), cntL49_00 > cntC3L2Z_00))
c443 = (Implies(And(L49_00C3L2Z_00, Not(DL49_00C3L2Z_00)), cntC3L2Z_00 > cntL49_00))

# Interface count clauses
c444 = (Implies(M2C1P3_00, cntC1P_00 > cntC1L23_00))
c445 = (Implies(And(M2C1P2_00, DC1P2_00), cntC2P_00 > cntC1L22_00))
c446 = (Implies(And(M2C1P2_00, Not(DC1P2_00)), cntC1P_00 > cntC1L22_00))
c447 = (Implies(M2C1P1_00, cntC1O_00 > cntC1L21_00))

c448 = (Implies(M2C2P3_00, cntC2P_00 > cntC2L23_00))
c449 = (Implies(And(M2C2P2_00, DC2P2_00), cntC3P_00 > cntC2L22_00))
c450 = (Implies(And(M2C2P2_00, Not(DC2P2_00)), cntC2P_00 > cntC2L22_00))
c451 = (Implies(M2C2P1_00, cntC2O_00 > cntC2L21_00))

c452 = (Implies(M2C3P3_00, cntC3P_00 > cntC3L23_00))
c453 = (Implies(And(M2C3P2_00, DC3P2_00), cntC1P_Y > cntC3L22_00))
c454 = (Implies(And(M2C3P2_00, Not(DC3P2_00)), cntC3P_00 > cntC3L22_00))
c455 = (Implies(M2C3P1_00, cntC3O_00 > cntC3L21_00))

c456 = (Implies(M4C1N1_00, cntC1O_00 > cntC1L21_00))
c457 = (Implies(M5C1N1_00, cntC1O_00 > cntC1L22_00))
c458 = (Implies(M6C1N1_00, cntC1O_00 > cntC1L23_00))
c459 = (Implies(And(M4C1N2_00, Not(DC1N2_00)), cntC1N_00 > cntC1L21_00))
c460 = (Implies(And(M5C1N2_00, Not(DC1N2_00)), cntC1N_00 > cntC1L22_00))
c461 = (Implies(And(M6C1N2_00, Not(DC1N2_00)), cntC1N_00 > cntC1L23_00))
c462 = (Implies(And(M4C1N2_00, DC1N2_00), cntC2N_00 > cntC1L21_00))
c463 = (Implies(And(M5C1N2_00, DC1N2_00), cntC2N_00 > cntC1L22_00))
c464 = (Implies(And(M6C1N2_00, DC1N2_00), cntC2N_00 > cntC1L23_00))
c465 = (Implies(M4C1N3_00, cntC1N_00 > cntC1L21_00))
c466 = (Implies(M5C1N3_00, cntC1N_00 > cntC1L22_00))
c467 = (Implies(M6C1N3_00, cntC1N_00 > cntC1L23_00))

c468 = (Implies(M4C2N1_00, cntC2O_00 > cntC2L21_00))
c469 = (Implies(M5C2N1_00, cntC2O_00 > cntC2L22_00))
c470 = (Implies(M6C2N1_00, cntC2O_00 > cntC2L23_00))
c471 = (Implies(And(M4C2N2_00, Not(DC2N2_00)), cntC2N_00 > cntC2L21_00))
c472 = (Implies(And(M5C2N2_00, Not(DC2N2_00)), cntC2N_00 > cntC2L22_00))
c473 = (Implies(And(M6C2N2_00, Not(DC2N2_00)), cntC2N_00 > cntC2L23_00))
c474 = (Implies(And(M4C2N2_00, DC2N2_00), cntC3N_00 > cntC2L21_00))
c475 = (Implies(And(M5C2N2_00, DC2N2_00), cntC3N_00 > cntC2L22_00))
c476 = (Implies(And(M6C2N2_00, DC2N2_00), cntC3N_00 > cntC2L23_00))
c477 = (Implies(M4C2N3_00, cntC2N_00 > cntC2L21_00))
c478 = (Implies(M5C2N3_00, cntC2N_00 > cntC2L22_00))
c479 = (Implies(M6C2N3_00, cntC2N_00 > cntC2L23_00))

c480 = (Implies(M4C3N1_00, cntC3O_00 > cntC3L21_00))
c481 = (Implies(M5C3N1_00, cntC3O_00 > cntC3L22_00))
c482 = (Implies(M6C3N1_00, cntC3O_00 > cntC3L23_00))
c483 = (Implies(M4C3N3_00, cntC3N_00 > cntC3L21_00))
c484 = (Implies(M5C3N3_00, cntC3N_00 > cntC3L22_00))
c485 = (Implies(M6C3N3_00, cntC3N_00 > cntC3L23_00))
c486 = (Implies(And(M4C3N2_00, Not(DC3N2_00)), cntC3N_00 > cntC3L21_00))
c487 = (Implies(And(M5C3N2_00, Not(DC3N2_00)), cntC3N_00 > cntC3L22_00))
c488 = (Implies(And(M6C3N2_00, Not(DC3N2_00)), cntC3N_00 > cntC3L23_00))
c489 = (Implies(And(M4C3N2_00, DC3N2_00), cntC1N_Y > cntC3L21_00))
c490 = (Implies(And(M5C3N2_00, DC3N2_00), cntC1N_Y > cntC3L22_00))
c491 = (Implies(And(M6C3N2_00, DC3N2_00), cntC1N_Y > cntC3L23_00))

# Transistor count clauses
c492 = (Implies(And(Not(C1P2_00), DC1P2_00), cntC2P_00 > cntC1P_00))
c493 = (Implies(And(Not(C1P2_00), Not(DC1P2_00)), cntC1P_00 > cntC2P_00))
c494 = (Implies(Not(C1P1_00), cntC1O_00 > cntC1P_00))
c495 = (Implies(And(C1NH_00, DC1NH_00), cntC2O_00 > cntC1O_00))
c496 = (Implies(And(C1NH_00, Not(DC1NH_00)), cntC1O_00 > cntC2O_00))
c497 = (Implies(C1NV_00, cntC1L2Z_00 > cntC1O_00))
c498 = (Implies(C1N1_00, cntC1O_00 > cntC1N_00))
c499 = (Implies(And(C1N2_00, DC1N2_00), cntC2N_00 > cntC1N_00))
c500 = (Implies(And(C1N2_00, Not(DC1N2_00)), cntC1N_00 > cntC2N_00))

c501 = (Implies(And(Not(C2P2_00), DC2P2_00), cntC3P_00 > cntC2P_00))
c502 = (Implies(And(Not(C2P2_00), Not(DC2P2_00)), cntC2P_00 > cntC3P_00))
c503 = (Implies(Not(C2P1_00), cntC2O_00 > cntC2P_00))
c504 = (Implies(And(C2NH_00, DC2NH_00), cntC3O_00 > cntC2O_00))
c505 = (Implies(And(C2NH_00, Not(DC2NH_00)), cntC2O_00 > cntC3O_00))
c506 = (Implies(C2NV_00, cntC2L2Z_00 > cntC2O_00))
c507 = (Implies(C2N1_00, cntC2O_00 > cntC2N_00))
c508 = (Implies(And(C2N2_00, DC2N2_00), cntC3N_00 > cntC2N_00))
c509 = (Implies(And(C2N2_00, Not(DC2N2_00)), cntC2N_00 > cntC3N_00))

c510 = (Implies(And(Not(C3P2_00), DC3P2_00), cntC1P_Y > cntC3P_00))
c511 = (Implies(And(Not(C3P2_00), Not(DC3P2_00)), cntC3P_00 > cntC1P_Y))
c512 = (Implies(Not(C3P1_00), cntC3O_00 > cntC3P_00))
c513 = (Implies(And(C3NH_00, Not(DC3NH_00)), cntC3O_00 > cntC1O_Y))
c514 = (Implies(And(C3NH_00, DC3NH_00), cntC1O_Y > cntC3O_00))
c515 = (Implies(C3NV_00, cntC3L2Z_00 > cntC3O_00))
c516 = (Implies(C3N1_00, cntC3O_00 > cntC3N_00))
c517 = (Implies(And(C3N2_00, DC3N2_00), cntC1N_Y > cntC3N_00))
c518 = (Implies(And(C3N2_00, Not(DC3N2_00)), cntC3N_00 > cntC1N_Y))

# Count boundary clauses
c519 = (maxCnt == 6)        # Must be 1 greater than desired max count
c520 = (minCnt == -1)       # Must be 1 lower than desired min count
c521 = And((minCnt < cntC1L21_00), (cntC1L21_00 < maxCnt))
c522 = And((minCnt < cntC1L22_00), (cntC1L22_00 < maxCnt))
c523 = And((minCnt < cntC1L23_00), (cntC1L23_00 < maxCnt))
c524 = And((minCnt < cntC1L2Z_00), (cntC1L2Z_00 < maxCnt))
c525 = And((minCnt < cntC2L21_00), (cntC2L21_00 < maxCnt))
c526 = And((minCnt < cntC2L22_00), (cntC2L22_00 < maxCnt))
c527 = And((minCnt < cntC2L23_00), (cntC2L23_00 < maxCnt))
c528 = And((minCnt < cntC2L2Z_00), (cntC2L2Z_00 < maxCnt))
c529 = And((minCnt < cntC3L21_00), (cntC3L21_00 < maxCnt))
c530 = And((minCnt < cntC3L22_00), (cntC3L22_00 < maxCnt))
c531 = And((minCnt < cntC3L23_00), (cntC3L23_00 < maxCnt))
c532 = And((minCnt < cntC3L2Z_00), (cntC3L2Z_00 < maxCnt))
c533 = And((minCnt < cntL31_00), (cntL31_00 < maxCnt))
c534 = And((minCnt < cntL32_00), (cntL32_00 < maxCnt))
c535 = And((minCnt < cntL33_00), (cntL33_00 < maxCnt))
c536 = And((minCnt < cntL34_00), (cntL34_00 < maxCnt))
c537 = And((minCnt < cntL35_00), (cntL35_00 < maxCnt))
c538 = And((minCnt < cntL36_00), (cntL36_00 < maxCnt))
c539 = And((minCnt < cntL37_00), (cntL37_00 < maxCnt))
c540 = And((minCnt < cntL38_00), (cntL38_00 < maxCnt))
c541 = And((minCnt < cntL39_00), (cntL39_00 < maxCnt))
c542 = And((minCnt < cntL41_00), (cntL41_00 < maxCnt))
c543 = And((minCnt < cntL42_00), (cntL42_00 < maxCnt))
c544 = And((minCnt < cntL43_00), (cntL43_00 < maxCnt))
c545 = And((minCnt < cntL44_00), (cntL44_00 < maxCnt))
c546 = And((minCnt < cntL45_00), (cntL45_00 < maxCnt))
c547 = And((minCnt < cntL46_00), (cntL46_00 < maxCnt))
c548 = And((minCnt < cntL47_00), (cntL47_00 < maxCnt))
c549 = And((minCnt < cntL48_00), (cntL48_00 < maxCnt))
c550 = And((minCnt < cntL49_00), (cntL49_00 < maxCnt))
c550a = And((minCnt < cntC1P_Y), (cntC1P_Y < maxCnt))
c550b = And((minCnt < cntC1O_Y), (cntC1O_Y < maxCnt))
c550c = And((minCnt < cntC1N_Y), (cntC1N_Y < maxCnt))
c551 = Implies(isInpL31_00, (cntL31_00 == 0))
c552 = Implies(isInpL32_00, (cntL32_00 == 0))
c553 = Implies(isInpL33_00, (cntL33_00 == 0))
c554 = Implies(isInpL34_00, (cntL34_00 == 0))
c555 = Implies(isInpL35_00, (cntL35_00 == 0))
c556 = Implies(isInpL36_00, (cntL36_00 == 0))
c557 = Implies(isInpL37_00, (cntL37_00 == 0))
c558 = Implies(isInpL38_00, (cntL38_00 == 0))
c559 = Implies(isInpL39_00, (cntL39_00 == 0))
c560 = Implies(isInpL41_00, (cntL41_00 == 0))
c561 = Implies(isInpL42_00, (cntL42_00 == 0))
c562 = Implies(isInpL43_00, (cntL43_00 == 0))
c563 = Implies(isInpL44_00, (cntL44_00 == 0))
c564 = Implies(isInpL45_00, (cntL45_00 == 0))
c565 = Implies(isInpL46_00, (cntL46_00 == 0))
c566 = Implies(isInpL47_00, (cntL47_00 == 0))
c567 = Implies(isInpL48_00, (cntL48_00 == 0))
c568 = Implies(isInpL49_00, (cntL49_00 == 0))
c569 = And((minCnt < cntC1P_00), (cntC1P_00 < maxCnt))
c570 = And((minCnt < cntC1O_00), (cntC1O_00 < maxCnt))
c571 = And((minCnt < cntC1N_00), (cntC1N_00 < maxCnt))
c572 = And((minCnt < cntC2P_00), (cntC2P_00 < maxCnt))
c573 = And((minCnt < cntC2O_00), (cntC2O_00 < maxCnt))
c574 = And((minCnt < cntC2N_00), (cntC2N_00 < maxCnt))
c575 = And((minCnt < cntC3P_00), (cntC3P_00 < maxCnt))
c576 = And((minCnt < cntC3O_00), (cntC3O_00 < maxCnt))
c577 = And((minCnt < cntC3N_00), (cntC3N_00 < maxCnt))

# PLACE I/O DECLARATIONS HERE
a = Bool('a')
cA = (a == L32_00)

b = Bool('b')
cB = (b == L41_00)

o = Bool('o')
cO = (o == L49_00)

# SET THESE SWITCHES AS NECESSARY
c587 = Not(isInpL31_00)       # = isInpL31_00
c588 = isInpL32_00              #   = Not(isInpL32_00)
c589 = Not(isInpL33_00)       # = isInpL33_00
c590 = Not(isInpL34_00)       # = isInpL34_00
c591 = Not(isInpL35_00)       # = isInpL35_00
c592 = Not(isInpL36_00)       # = isInpL36_00
c593 = Not(isInpL37_00)       # = isInpL37_00
c594 = Not(isInpL38_00)       # = isInpL38_00
c595 = Not(isInpL39_00)       # = isInpL39_00
c578 = isInpL41_00              #  = Not(isInpL41_00)
c579 = Not(isInpL42_00)       # = isInpL42_00
c580 = Not(isInpL43_00)       # = isInpL43_00
c581 = Not(isInpL44_00)       # = isInpL44_00
c582 = Not(isInpL45_00)       # = isInpL45_00
c583 = Not(isInpL46_00)       # = isInpL46_00
c584 = Not(isInpL47_00)       # = isInpL47_00
c585 = Not(isInpL48_00)       # = isInpL48_00
c586 = Not(isInpL49_00)       # = isInpL49_00


S = Solver()
S.add(c0,c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13,c14,c15,c16,c17,c18,c19,c20,c21,c22,c23,c24,c25,c26,c27,c28,c29,c30,c31,c32,c33,c34,c35,c36,c37,c38,c39,c40,c41,c42,c43,c44,c45,c46,c47,c48,c49,c50,c51,c52,c53,c54,c55,c56,c57,c58,c59,c60,c61,c62,c63,c64,c65,c66,c67,c68,c69,c70,c71,c72,c73,c74,c75,c76,c77,c78,c79,c80,c81,c82,c83,c84,c85,c86,c87,c88,c89,c90,c91,c92,c93,c94,c95,c96,c97,c98,c99,c100,c101,c102,c103,c104,c105,c106,c107,c108,c109,c110,c111,c112,c113,c114,c115,c116,c117,c118,c119,c120,c121,c122,c123,c124,c125,c126,c127,c128,c129,c130,c131,c132,c133,c134,c135,c136,c137,c138,c139,c140,c141,c142,c143,c144,c145,c146,c147,c148,c149,c150,c151,c152,c153,c154,c155,c156,c157,c158,c159,c160,c161,c162,c163,c164,c165,c166,c167,c168,c169,c170,c171,c172,c173,c174,c175,c176,c177,c178,c179,c180,c181,c182,c183,c184,c185,c186,c187,c188,c189,c190,c191,c192,c193,c194,c195,c196,c197,c198,c199,c200,c201,c202,c203,c204,c205,c206,c207,c208,c209,c210,c211,c212,c213,c214,c215,c216,c217,c218,c219,c220,c221,c222,c223,c224,c225,c226,c227,c228,c229,c230,c231,c232,c233,c234,c235,c236,c237,c238,c239,c240,c241,c242,c243,c244,c245,c246,c247,c248,c249,c250,c251,c252,c253,c254,c255,c256,c257,c258,c259,c260,c261,c262,c263,c264,c265,c266,c267,c268,c269,c270,c271,c272,c273,c274,c275,c276,c277,c278,c279,c280,c281,c282,c283,c284,c285,c286,c287,c288,c289,c290,c291,c292,c293,c294,c295,c296,c297,c298,c299,c300,c301,c302,c303,c304,c305,c306,c307,c308,c309,c310,c311,c312,c313,c314,c315,c316,c317,c318,c319,c320,c321,c322,c323,c324,c325,c326,c327,c328,c329,c330,c331,c332,c333,c334,c335,c336,c337,c338,c339,c340,c341,c342,c343,c344,c345,c346,c347,c348,c349,c350,c351,c352,c353,c354,c355,c356,c357,c358,c359,c360,c361,c362,c363,c364,c365,c366,c367,c368,c369,c370,c371,c372,c373,c374,c375,c376,c377,c378,c379,c380,c381,c382,c383,c384,c385,c386,c387,c388,c389,c390,c391,c392,c393,c394,c395,c396,c397,c398,c399,c400,c401,c402,c403,c404,c405,c406,c407,c408,c409,c410,c411,c412,c413,c414,c415,c416,c417,c418,c419,c420,c421,c422,c423,c424,c425,c426,c427,c428,c429,c430,c431,c432,c433,c434,c435,c436,c437,c438,c439,c440,c441,c442,c443,c444,c445,c446,c447,c448,c449,c450,c451,c452,c453,c454,c455,c456,c457,c458,c459,c460,c461,c462,c463,c464,c465,c466,c467,c468,c469,c470,c471,c472,c473,c474,c475,c476,c477,c478,c479,c480,c481,c482,c483,c484,c485,c486,c487,c488,c489,c490,c491,c492,c493,c494,c495,c496,c497,c498,c499,c500,c501,c502,c503,c504,c505,c506,c507,c508,c509,c510,c511,c512,c513,c514,c515,c516,c517,c518,c519,c520,c521,c522,c523,c524,c525,c526,c527,c528,c529,c530,c531,c532,c533,c534,c535,c536,c537,c538,c539,c540,c541,c542,c543,c544,c545,c546,c547,c548,c549,c550,c551,c552,c553,c554,c555,c556,c557,c558,c559,c560,c561,c562,c563,c564,c565,c566,c567,c568,c569,c570,c571,c572,c573,c574,c575,c576,c577,c578,c579,c580,c581,c582,c583,c584,c585,c586,c587,c588,c589,c590,c591,c592,c593,c594,c595)
S.add(c550a,c550b,c550c)
S.add(cA,cB,cO)
print(S.check())
